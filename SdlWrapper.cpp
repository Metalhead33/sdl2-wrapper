#include "SdlWrapper.hpp"
#include <stdexcept>

void OffloadSDL()
{
	dlclose(SDL_LIBRARY);
}
void LoadSDL()
{
	SDL_LIBRARY = dlopen("libSDL2.so",RTLD_LAZY);
	if(!SDL_LIBRARY) throw std::runtime_error("Couldn't load SDL2!");
	SDL::AddEventWatch = reinterpret_cast<PF_SDL_AddEventWatch>(dlsym(SDL_LIBRARY,"SDL_AddEventWatch"));
	SDL::AddHintCallback = reinterpret_cast<PF_SDL_AddHintCallback>(dlsym(SDL_LIBRARY,"SDL_AddHintCallback"));
	SDL::AddTimer = reinterpret_cast<PF_SDL_AddTimer>(dlsym(SDL_LIBRARY,"SDL_AddTimer"));
	SDL::AllocFormat = reinterpret_cast<PF_SDL_AllocFormat>(dlsym(SDL_LIBRARY,"SDL_AllocFormat"));
	SDL::AllocPalette = reinterpret_cast<PF_SDL_AllocPalette>(dlsym(SDL_LIBRARY,"SDL_AllocPalette"));
	SDL::AllocRW = reinterpret_cast<PF_SDL_AllocRW>(dlsym(SDL_LIBRARY,"SDL_AllocRW"));
	/*pSDL_AndroidGetActivity = reinterpret_cast<PF_SDL_AndroidGetActivity>(dlsym(SDL_LIBRARY,"SDL_AndroidGetActivity"));
	SDL::AndroidGetExternalStoragePath = reinterpret_cast<PF_SDL_AndroidGetExternalStoragePath>(dlsym(SDL_LIBRARY,"SDL_AndroidGetExternalStoragePath"));
	SDL::AndroidGetExternalStorageState = reinterpret_cast<PF_SDL_AndroidGetExternalStorageState>(dlsym(SDL_LIBRARY,"SDL_AndroidGetExternalStorageState"));
	SDL::AndroidGetInternalStoragePath = reinterpret_cast<PF_SDL_AndroidGetInternalStoragePath>(dlsym(SDL_LIBRARY,"SDL_AndroidGetInternalStoragePath"));
	SDL::AndroidGetJNIEnv = reinterpret_cast<PF_SDL_AndroidGetJNIEnv>(dlsym(SDL_LIBRARY,"SDL_AndroidGetJNIEnv"));*/
	SDL::AtomicAdd = reinterpret_cast<PF_SDL_AtomicAdd>(dlsym(SDL_LIBRARY,"SDL_AtomicAdd"));
	SDL::AtomicCAS = reinterpret_cast<PF_SDL_AtomicCAS>(dlsym(SDL_LIBRARY,"SDL_AtomicCAS"));
	SDL::AtomicCASPtr = reinterpret_cast<PF_SDL_AtomicCASPtr>(dlsym(SDL_LIBRARY,"SDL_AtomicCASPtr"));
	SDL::AtomicGet = reinterpret_cast<PF_SDL_AtomicGet>(dlsym(SDL_LIBRARY,"SDL_AtomicGet"));
	SDL::AtomicGetPtr = reinterpret_cast<PF_SDL_AtomicGetPtr>(dlsym(SDL_LIBRARY,"SDL_AtomicGetPtr"));
	SDL::AtomicLock = reinterpret_cast<PF_SDL_AtomicLock>(dlsym(SDL_LIBRARY,"SDL_AtomicLock"));
	SDL::AtomicSet = reinterpret_cast<PF_SDL_AtomicSet>(dlsym(SDL_LIBRARY,"SDL_AtomicSet"));
	SDL::AtomicSetPtr = reinterpret_cast<PF_SDL_AtomicSetPtr>(dlsym(SDL_LIBRARY,"SDL_AtomicSetPtr"));
	SDL::AtomicTryLock = reinterpret_cast<PF_SDL_AtomicTryLock>(dlsym(SDL_LIBRARY,"SDL_AtomicTryLock"));
	SDL::AtomicUnlock = reinterpret_cast<PF_SDL_AtomicUnlock>(dlsym(SDL_LIBRARY,"SDL_AtomicUnlock"));
	SDL::AudioInit = reinterpret_cast<PF_SDL_AudioInit>(dlsym(SDL_LIBRARY,"SDL_AudioInit"));
	SDL::AudioQuit = reinterpret_cast<PF_SDL_AudioQuit>(dlsym(SDL_LIBRARY,"SDL_AudioQuit"));
	SDL::BuildAudioCVT = reinterpret_cast<PF_SDL_BuildAudioCVT>(dlsym(SDL_LIBRARY,"SDL_BuildAudioCVT"));
	SDL::CalculateGammaRamp = reinterpret_cast<PF_SDL_CalculateGammaRamp>(dlsym(SDL_LIBRARY,"SDL_CalculateGammaRamp"));
	SDL::CaptureMouse = reinterpret_cast<PF_SDL_CaptureMouse>(dlsym(SDL_LIBRARY,"SDL_CaptureMouse"));
	SDL::ClearError = reinterpret_cast<PF_SDL_ClearError>(dlsym(SDL_LIBRARY,"SDL_ClearError"));
	SDL::ClearHints = reinterpret_cast<PF_SDL_ClearHints>(dlsym(SDL_LIBRARY,"SDL_ClearHints"));
	SDL::ClearQueuedAudio = reinterpret_cast<PF_SDL_ClearQueuedAudio>(dlsym(SDL_LIBRARY,"SDL_ClearQueuedAudio"));
	SDL::CloseAudio = reinterpret_cast<PF_SDL_CloseAudio>(dlsym(SDL_LIBRARY,"SDL_CloseAudio"));
	SDL::CloseAudioDevice = reinterpret_cast<PF_SDL_CloseAudioDevice>(dlsym(SDL_LIBRARY,"SDL_CloseAudioDevice"));
	SDL::CondBroadcast = reinterpret_cast<PF_SDL_CondBroadcast>(dlsym(SDL_LIBRARY,"SDL_CondBroadcast"));
	SDL::CondSignal = reinterpret_cast<PF_SDL_CondSignal>(dlsym(SDL_LIBRARY,"SDL_CondSignal"));
	SDL::CondWait = reinterpret_cast<PF_SDL_CondWait>(dlsym(SDL_LIBRARY,"SDL_CondWait"));
	SDL::CondWaitTimeout = reinterpret_cast<PF_SDL_CondWaitTimeout>(dlsym(SDL_LIBRARY,"SDL_CondWaitTimeout"));
	SDL::ConvertAudio = reinterpret_cast<PF_SDL_ConvertAudio>(dlsym(SDL_LIBRARY,"SDL_ConvertAudio"));
	SDL::ConvertPixels = reinterpret_cast<PF_SDL_ConvertPixels>(dlsym(SDL_LIBRARY,"SDL_ConvertPixels"));
	SDL::ConvertSurface = reinterpret_cast<PF_SDL_ConvertSurface>(dlsym(SDL_LIBRARY,"SDL_ConvertSurface"));
	SDL::ConvertSurfaceFormat = reinterpret_cast<PF_SDL_ConvertSurfaceFormat>(dlsym(SDL_LIBRARY,"SDL_ConvertSurfaceFormat"));
	SDL::CreateColorCursor = reinterpret_cast<PF_SDL_CreateColorCursor>(dlsym(SDL_LIBRARY,"SDL_CreateColorCursor"));
	SDL::CreateCond = reinterpret_cast<PF_SDL_CreateCond>(dlsym(SDL_LIBRARY,"SDL_CreateCond"));
	SDL::CreateCursor = reinterpret_cast<PF_SDL_CreateCursor>(dlsym(SDL_LIBRARY,"SDL_CreateCursor"));
	SDL::CreateMutex = reinterpret_cast<PF_SDL_CreateMutex>(dlsym(SDL_LIBRARY,"SDL_CreateMutex"));
	SDL::CreateRGBSurface = reinterpret_cast<PF_SDL_CreateRGBSurface>(dlsym(SDL_LIBRARY,"SDL_CreateRGBSurface"));
	SDL::CreateRGBSurfaceFrom = reinterpret_cast<PF_SDL_CreateRGBSurfaceFrom>(dlsym(SDL_LIBRARY,"SDL_CreateRGBSurfaceFrom"));
	SDL::CreateRenderer = reinterpret_cast<PF_SDL_CreateRenderer>(dlsym(SDL_LIBRARY,"SDL_CreateRenderer"));
	SDL::CreateSemaphore = reinterpret_cast<PF_SDL_CreateSemaphore>(dlsym(SDL_LIBRARY,"SDL_CreateSemaphore"));
	//pSDL_CreateShapedWindow = reinterpret_cast<PF_SDL_CreateShapedWindow>(dlsym(SDL_LIBRARY,"SDL_CreateShapedWindow"));
	SDL::CreateSoftwareRenderer = reinterpret_cast<PF_SDL_CreateSoftwareRenderer>(dlsym(SDL_LIBRARY,"SDL_CreateSoftwareRenderer"));
	SDL::CreateSystemCursor = reinterpret_cast<PF_SDL_CreateSystemCursor>(dlsym(SDL_LIBRARY,"SDL_CreateSystemCursor"));
	SDL::CreateTexture = reinterpret_cast<PF_SDL_CreateTexture>(dlsym(SDL_LIBRARY,"SDL_CreateTexture"));
	SDL::CreateTextureFromSurface = reinterpret_cast<PF_SDL_CreateTextureFromSurface>(dlsym(SDL_LIBRARY,"SDL_CreateTextureFromSurface"));
	SDL::CreateThread = reinterpret_cast<PF_SDL_CreateThread>(dlsym(SDL_LIBRARY,"SDL_CreateThread"));
	SDL::CreateThread = reinterpret_cast<PF_SDL_CreateThread>(dlsym(SDL_LIBRARY,"SDL_CreateThread"));
	SDL::CreateWindow = reinterpret_cast<PF_SDL_CreateWindow>(dlsym(SDL_LIBRARY,"SDL_CreateWindow"));
	SDL::CreateWindowAndRenderer = reinterpret_cast<PF_SDL_CreateWindowAndRenderer>(dlsym(SDL_LIBRARY,"SDL_CreateWindowAndRenderer"));
	SDL::CreateWindowFrom = reinterpret_cast<PF_SDL_CreateWindowFrom>(dlsym(SDL_LIBRARY,"SDL_CreateWindowFrom"));
	//pSDL_DXGIGetOutputInfo = reinterpret_cast<PF_SDL_DXGIGetOutputInfo>(dlsym(SDL_LIBRARY,"SDL_DXGIGetOutputInfo"));
	SDL::DelEventWatch = reinterpret_cast<PF_SDL_DelEventWatch>(dlsym(SDL_LIBRARY,"SDL_DelEventWatch"));
	SDL::DelHintCallback = reinterpret_cast<PF_SDL_DelHintCallback>(dlsym(SDL_LIBRARY,"SDL_DelHintCallback"));
	SDL::Delay = reinterpret_cast<PF_SDL_Delay>(dlsym(SDL_LIBRARY,"SDL_Delay"));
	SDL::DestroyCond = reinterpret_cast<PF_SDL_DestroyCond>(dlsym(SDL_LIBRARY,"SDL_DestroyCond"));
	SDL::DestroyMutex = reinterpret_cast<PF_SDL_DestroyMutex>(dlsym(SDL_LIBRARY,"SDL_DestroyMutex"));
	SDL::DestroyRenderer = reinterpret_cast<PF_SDL_DestroyRenderer>(dlsym(SDL_LIBRARY,"SDL_DestroyRenderer"));
	SDL::DestroySemaphore = reinterpret_cast<PF_SDL_DestroySemaphore>(dlsym(SDL_LIBRARY,"SDL_DestroySemaphore"));
	SDL::DestroyTexture = reinterpret_cast<PF_SDL_DestroyTexture>(dlsym(SDL_LIBRARY,"SDL_DestroyTexture"));
	SDL::DestroyWindow = reinterpret_cast<PF_SDL_DestroyWindow>(dlsym(SDL_LIBRARY,"SDL_DestroyWindow"));
	SDL::DetachThread = reinterpret_cast<PF_SDL_DetachThread>(dlsym(SDL_LIBRARY,"SDL_DetachThread"));
	//pSDL_Direct3D9GetAdapterIndex = reinterpret_cast<PF_SDL_Direct3D9GetAdapterIndex>(dlsym(SDL_LIBRARY,"SDL_Direct3D9GetAdapterIndex"));
	SDL::DisableScreenSaver = reinterpret_cast<PF_SDL_DisableScreenSaver>(dlsym(SDL_LIBRARY,"SDL_DisableScreenSaver"));
	SDL::EnableScreenSaver = reinterpret_cast<PF_SDL_EnableScreenSaver>(dlsym(SDL_LIBRARY,"SDL_EnableScreenSaver"));
	SDL::EnclosePoints = reinterpret_cast<PF_SDL_EnclosePoints>(dlsym(SDL_LIBRARY,"SDL_EnclosePoints"));
	SDL::Error = reinterpret_cast<PF_SDL_Error>(dlsym(SDL_LIBRARY,"SDL_Error"));
	SDL::EventState = reinterpret_cast<PF_SDL_EventState>(dlsym(SDL_LIBRARY,"SDL_EventState"));
	SDL::FillRect = reinterpret_cast<PF_SDL_FillRect>(dlsym(SDL_LIBRARY,"SDL_FillRect"));
	SDL::FillRects = reinterpret_cast<PF_SDL_FillRects>(dlsym(SDL_LIBRARY,"SDL_FillRects"));
	SDL::FilterEvents = reinterpret_cast<PF_SDL_FilterEvents>(dlsym(SDL_LIBRARY,"SDL_FilterEvents"));
	SDL::FlushEvent = reinterpret_cast<PF_SDL_FlushEvent>(dlsym(SDL_LIBRARY,"SDL_FlushEvent"));
	SDL::FlushEvents = reinterpret_cast<PF_SDL_FlushEvents>(dlsym(SDL_LIBRARY,"SDL_FlushEvents"));
	SDL::FreeCursor = reinterpret_cast<PF_SDL_FreeCursor>(dlsym(SDL_LIBRARY,"SDL_FreeCursor"));
	SDL::FreeFormat = reinterpret_cast<PF_SDL_FreeFormat>(dlsym(SDL_LIBRARY,"SDL_FreeFormat"));
	SDL::FreePalette = reinterpret_cast<PF_SDL_FreePalette>(dlsym(SDL_LIBRARY,"SDL_FreePalette"));
	SDL::FreeRW = reinterpret_cast<PF_SDL_FreeRW>(dlsym(SDL_LIBRARY,"SDL_FreeRW"));
	SDL::FreeSurface = reinterpret_cast<PF_SDL_FreeSurface>(dlsym(SDL_LIBRARY,"SDL_FreeSurface"));
	SDL::FreeWAV = reinterpret_cast<PF_SDL_FreeWAV>(dlsym(SDL_LIBRARY,"SDL_FreeWAV"));
	SDL::GL_BindTexture = reinterpret_cast<PF_SDL_GL_BindTexture>(dlsym(SDL_LIBRARY,"SDL_GL_BindTexture"));
	SDL::GL_CreateContext = reinterpret_cast<PF_SDL_GL_CreateContext>(dlsym(SDL_LIBRARY,"SDL_GL_CreateContext"));
	SDL::GL_DeleteContext = reinterpret_cast<PF_SDL_GL_DeleteContext>(dlsym(SDL_LIBRARY,"SDL_GL_DeleteContext"));
	SDL::GL_ExtensionSupported = reinterpret_cast<PF_SDL_GL_ExtensionSupported>(dlsym(SDL_LIBRARY,"SDL_GL_ExtensionSupported"));
	SDL::GL_GetAttribute = reinterpret_cast<PF_SDL_GL_GetAttribute>(dlsym(SDL_LIBRARY,"SDL_GL_GetAttribute"));
	SDL::GL_GetCurrentContext = reinterpret_cast<PF_SDL_GL_GetCurrentContext>(dlsym(SDL_LIBRARY,"SDL_GL_GetCurrentContext"));
	SDL::GL_GetCurrentWindow = reinterpret_cast<PF_SDL_GL_GetCurrentWindow>(dlsym(SDL_LIBRARY,"SDL_GL_GetCurrentWindow"));
	SDL::GL_GetDrawableSize = reinterpret_cast<PF_SDL_GL_GetDrawableSize>(dlsym(SDL_LIBRARY,"SDL_GL_GetDrawableSize"));
	SDL::GL_GetProcAddress = reinterpret_cast<PF_SDL_GL_GetProcAddress>(dlsym(SDL_LIBRARY,"SDL_GL_GetProcAddress"));
	SDL::GL_GetSwapInterval = reinterpret_cast<PF_SDL_GL_GetSwapInterval>(dlsym(SDL_LIBRARY,"SDL_GL_GetSwapInterval"));
	SDL::GL_LoadLibrary = reinterpret_cast<PF_SDL_GL_LoadLibrary>(dlsym(SDL_LIBRARY,"SDL_GL_LoadLibrary"));
	SDL::GL_MakeCurrent = reinterpret_cast<PF_SDL_GL_MakeCurrent>(dlsym(SDL_LIBRARY,"SDL_GL_MakeCurrent"));
	SDL::GL_ResetAttributes = reinterpret_cast<PF_SDL_GL_ResetAttributes>(dlsym(SDL_LIBRARY,"SDL_GL_ResetAttributes"));
	SDL::GL_SetAttribute = reinterpret_cast<PF_SDL_GL_SetAttribute>(dlsym(SDL_LIBRARY,"SDL_GL_SetAttribute"));
	SDL::GL_SetSwapInterval = reinterpret_cast<PF_SDL_GL_SetSwapInterval>(dlsym(SDL_LIBRARY,"SDL_GL_SetSwapInterval"));
	SDL::GL_SwapWindow = reinterpret_cast<PF_SDL_GL_SwapWindow>(dlsym(SDL_LIBRARY,"SDL_GL_SwapWindow"));
	SDL::GL_UnbindTexture = reinterpret_cast<PF_SDL_GL_UnbindTexture>(dlsym(SDL_LIBRARY,"SDL_GL_UnbindTexture"));
	SDL::GL_UnloadLibrary = reinterpret_cast<PF_SDL_GL_UnloadLibrary>(dlsym(SDL_LIBRARY,"SDL_GL_UnloadLibrary"));
	SDL::GameControllerAddMapping = reinterpret_cast<PF_SDL_GameControllerAddMapping>(dlsym(SDL_LIBRARY,"SDL_GameControllerAddMapping"));
	SDL::GameControllerAddMappingsFromRW = reinterpret_cast<PF_SDL_GameControllerAddMappingsFromRW>(dlsym(SDL_LIBRARY,"SDL_GameControllerAddMappingsFromRW"));
	SDL::GameControllerClose = reinterpret_cast<PF_SDL_GameControllerClose>(dlsym(SDL_LIBRARY,"SDL_GameControllerClose"));
	SDL::GameControllerEventState = reinterpret_cast<PF_SDL_GameControllerEventState>(dlsym(SDL_LIBRARY,"SDL_GameControllerEventState"));
	SDL::GameControllerFromInstanceID = reinterpret_cast<PF_SDL_GameControllerFromInstanceID>(dlsym(SDL_LIBRARY,"SDL_GameControllerFromInstanceID"));
	SDL::GameControllerGetAttached = reinterpret_cast<PF_SDL_GameControllerGetAttached>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetAttached"));
	SDL::GameControllerGetAxis = reinterpret_cast<PF_SDL_GameControllerGetAxis>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetAxis"));
	SDL::GameControllerGetAxisFromString = reinterpret_cast<PF_SDL_GameControllerGetAxisFromString>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetAxisFromString"));
	SDL::GameControllerGetBindForAxis = reinterpret_cast<PF_SDL_GameControllerGetBindForAxis>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetBindForAxis"));
	SDL::GameControllerGetBindForButton = reinterpret_cast<PF_SDL_GameControllerGetBindForButton>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetBindForButton"));
	SDL::GameControllerGetButton = reinterpret_cast<PF_SDL_GameControllerGetButton>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetButton"));
	SDL::GameControllerGetButtonFromString = reinterpret_cast<PF_SDL_GameControllerGetButtonFromString>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetButtonFromString"));
	SDL::GameControllerGetJoystick = reinterpret_cast<PF_SDL_GameControllerGetJoystick>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetJoystick"));
	SDL::GameControllerGetStringForAxis = reinterpret_cast<PF_SDL_GameControllerGetStringForAxis>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetStringForAxis"));
	SDL::GameControllerGetStringForButton = reinterpret_cast<PF_SDL_GameControllerGetStringForButton>(dlsym(SDL_LIBRARY,"SDL_GameControllerGetStringForButton"));
	SDL::GameControllerMapping = reinterpret_cast<PF_SDL_GameControllerMapping>(dlsym(SDL_LIBRARY,"SDL_GameControllerMapping"));
	SDL::GameControllerMappingForGUID = reinterpret_cast<PF_SDL_GameControllerMappingForGUID>(dlsym(SDL_LIBRARY,"SDL_GameControllerMappingForGUID"));
	SDL::GameControllerName = reinterpret_cast<PF_SDL_GameControllerName>(dlsym(SDL_LIBRARY,"SDL_GameControllerName"));
	SDL::GameControllerNameForIndex = reinterpret_cast<PF_SDL_GameControllerNameForIndex>(dlsym(SDL_LIBRARY,"SDL_GameControllerNameForIndex"));
	SDL::GameControllerOpen = reinterpret_cast<PF_SDL_GameControllerOpen>(dlsym(SDL_LIBRARY,"SDL_GameControllerOpen"));
	SDL::GameControllerUpdate = reinterpret_cast<PF_SDL_GameControllerUpdate>(dlsym(SDL_LIBRARY,"SDL_GameControllerUpdate"));
	SDL::GetAssertionHandler = reinterpret_cast<PF_SDL_GetAssertionHandler>(dlsym(SDL_LIBRARY,"SDL_GetAssertionHandler"));
	SDL::GetAssertionReport = reinterpret_cast<PF_SDL_GetAssertionReport>(dlsym(SDL_LIBRARY,"SDL_GetAssertionReport"));
	SDL::GetAudioDeviceName = reinterpret_cast<PF_SDL_GetAudioDeviceName>(dlsym(SDL_LIBRARY,"SDL_GetAudioDeviceName"));
	SDL::GetAudioDeviceStatus = reinterpret_cast<PF_SDL_GetAudioDeviceStatus>(dlsym(SDL_LIBRARY,"SDL_GetAudioDeviceStatus"));
	SDL::GetAudioDriver = reinterpret_cast<PF_SDL_GetAudioDriver>(dlsym(SDL_LIBRARY,"SDL_GetAudioDriver"));
	SDL::GetAudioStatus = reinterpret_cast<PF_SDL_GetAudioStatus>(dlsym(SDL_LIBRARY,"SDL_GetAudioStatus"));
	SDL::GetBasePath = reinterpret_cast<PF_SDL_GetBasePath>(dlsym(SDL_LIBRARY,"SDL_GetBasePath"));
	SDL::GetCPUCacheLineSize = reinterpret_cast<PF_SDL_GetCPUCacheLineSize>(dlsym(SDL_LIBRARY,"SDL_GetCPUCacheLineSize"));
	SDL::GetCPUCount = reinterpret_cast<PF_SDL_GetCPUCount>(dlsym(SDL_LIBRARY,"SDL_GetCPUCount"));
	SDL::GetClipRect = reinterpret_cast<PF_SDL_GetClipRect>(dlsym(SDL_LIBRARY,"SDL_GetClipRect"));
	SDL::GetClipboardText = reinterpret_cast<PF_SDL_GetClipboardText>(dlsym(SDL_LIBRARY,"SDL_GetClipboardText"));
	SDL::GetClosestDisplayMode = reinterpret_cast<PF_SDL_GetClosestDisplayMode>(dlsym(SDL_LIBRARY,"SDL_GetClosestDisplayMode"));
	SDL::GetColorKey = reinterpret_cast<PF_SDL_GetColorKey>(dlsym(SDL_LIBRARY,"SDL_GetColorKey"));
	SDL::GetCurrentAudioDriver = reinterpret_cast<PF_SDL_GetCurrentAudioDriver>(dlsym(SDL_LIBRARY,"SDL_GetCurrentAudioDriver"));
	SDL::GetCurrentDisplayMode = reinterpret_cast<PF_SDL_GetCurrentDisplayMode>(dlsym(SDL_LIBRARY,"SDL_GetCurrentDisplayMode"));
	SDL::GetCurrentVideoDriver = reinterpret_cast<PF_SDL_GetCurrentVideoDriver>(dlsym(SDL_LIBRARY,"SDL_GetCurrentVideoDriver"));
	SDL::GetCursor = reinterpret_cast<PF_SDL_GetCursor>(dlsym(SDL_LIBRARY,"SDL_GetCursor"));
	SDL::GetDefaultAssertionHandler = reinterpret_cast<PF_SDL_GetDefaultAssertionHandler>(dlsym(SDL_LIBRARY,"SDL_GetDefaultAssertionHandler"));
	SDL::GetDefaultCursor = reinterpret_cast<PF_SDL_GetDefaultCursor>(dlsym(SDL_LIBRARY,"SDL_GetDefaultCursor"));
	SDL::GetDesktopDisplayMode = reinterpret_cast<PF_SDL_GetDesktopDisplayMode>(dlsym(SDL_LIBRARY,"SDL_GetDesktopDisplayMode"));
	SDL::GetDisplayBounds = reinterpret_cast<PF_SDL_GetDisplayBounds>(dlsym(SDL_LIBRARY,"SDL_GetDisplayBounds"));
	SDL::GetDisplayDPI = reinterpret_cast<PF_SDL_GetDisplayDPI>(dlsym(SDL_LIBRARY,"SDL_GetDisplayDPI"));
	SDL::GetDisplayMode = reinterpret_cast<PF_SDL_GetDisplayMode>(dlsym(SDL_LIBRARY,"SDL_GetDisplayMode"));
	SDL::GetDisplayName = reinterpret_cast<PF_SDL_GetDisplayName>(dlsym(SDL_LIBRARY,"SDL_GetDisplayName"));
	SDL::GetError = reinterpret_cast<PF_SDL_GetError>(dlsym(SDL_LIBRARY,"SDL_GetError"));
	SDL::GetEventFilter = reinterpret_cast<PF_SDL_GetEventFilter>(dlsym(SDL_LIBRARY,"SDL_GetEventFilter"));
	SDL::GetGlobalMouseState = reinterpret_cast<PF_SDL_GetGlobalMouseState>(dlsym(SDL_LIBRARY,"SDL_GetGlobalMouseState"));
	SDL::GetGrabbedWindow = reinterpret_cast<PF_SDL_GetGrabbedWindow>(dlsym(SDL_LIBRARY,"SDL_GetGrabbedWindow"));
	SDL::GetHint = reinterpret_cast<PF_SDL_GetHint>(dlsym(SDL_LIBRARY,"SDL_GetHint"));
	SDL::GetKeyFromName = reinterpret_cast<PF_SDL_GetKeyFromName>(dlsym(SDL_LIBRARY,"SDL_GetKeyFromName"));
	SDL::GetKeyFromScancode = reinterpret_cast<PF_SDL_GetKeyFromScancode>(dlsym(SDL_LIBRARY,"SDL_GetKeyFromScancode"));
	SDL::GetKeyName = reinterpret_cast<PF_SDL_GetKeyName>(dlsym(SDL_LIBRARY,"SDL_GetKeyName"));
	SDL::GetKeyboardFocus = reinterpret_cast<PF_SDL_GetKeyboardFocus>(dlsym(SDL_LIBRARY,"SDL_GetKeyboardFocus"));
	SDL::GetKeyboardState = reinterpret_cast<PF_SDL_GetKeyboardState>(dlsym(SDL_LIBRARY,"SDL_GetKeyboardState"));
	SDL::GetModState = reinterpret_cast<PF_SDL_GetModState>(dlsym(SDL_LIBRARY,"SDL_GetModState"));
	SDL::GetMouseFocus = reinterpret_cast<PF_SDL_GetMouseFocus>(dlsym(SDL_LIBRARY,"SDL_GetMouseFocus"));
	SDL::GetMouseState = reinterpret_cast<PF_SDL_GetMouseState>(dlsym(SDL_LIBRARY,"SDL_GetMouseState"));
	SDL::GetNumAudioDevices = reinterpret_cast<PF_SDL_GetNumAudioDevices>(dlsym(SDL_LIBRARY,"SDL_GetNumAudioDevices"));
	SDL::GetNumAudioDrivers = reinterpret_cast<PF_SDL_GetNumAudioDrivers>(dlsym(SDL_LIBRARY,"SDL_GetNumAudioDrivers"));
	SDL::GetNumDisplayModes = reinterpret_cast<PF_SDL_GetNumDisplayModes>(dlsym(SDL_LIBRARY,"SDL_GetNumDisplayModes"));
	SDL::GetNumRenderDrivers = reinterpret_cast<PF_SDL_GetNumRenderDrivers>(dlsym(SDL_LIBRARY,"SDL_GetNumRenderDrivers"));
	SDL::GetNumTouchDevices = reinterpret_cast<PF_SDL_GetNumTouchDevices>(dlsym(SDL_LIBRARY,"SDL_GetNumTouchDevices"));
	SDL::GetNumTouchFingers = reinterpret_cast<PF_SDL_GetNumTouchFingers>(dlsym(SDL_LIBRARY,"SDL_GetNumTouchFingers"));
	SDL::GetNumVideoDisplays = reinterpret_cast<PF_SDL_GetNumVideoDisplays>(dlsym(SDL_LIBRARY,"SDL_GetNumVideoDisplays"));
	SDL::GetNumVideoDrivers = reinterpret_cast<PF_SDL_GetNumVideoDrivers>(dlsym(SDL_LIBRARY,"SDL_GetNumVideoDrivers"));
	SDL::GetPerformanceCounter = reinterpret_cast<PF_SDL_GetPerformanceCounter>(dlsym(SDL_LIBRARY,"SDL_GetPerformanceCounter"));
	SDL::GetPerformanceFrequency = reinterpret_cast<PF_SDL_GetPerformanceFrequency>(dlsym(SDL_LIBRARY,"SDL_GetPerformanceFrequency"));
	SDL::GetPixelFormatName = reinterpret_cast<PF_SDL_GetPixelFormatName>(dlsym(SDL_LIBRARY,"SDL_GetPixelFormatName"));
	SDL::GetPlatform = reinterpret_cast<PF_SDL_GetPlatform>(dlsym(SDL_LIBRARY,"SDL_GetPlatform"));
	SDL::GetPowerInfo = reinterpret_cast<PF_SDL_GetPowerInfo>(dlsym(SDL_LIBRARY,"SDL_GetPowerInfo"));
	SDL::GetPrefPath = reinterpret_cast<PF_SDL_GetPrefPath>(dlsym(SDL_LIBRARY,"SDL_GetPrefPath"));
	SDL::GetQueuedAudioSize = reinterpret_cast<PF_SDL_GetQueuedAudioSize>(dlsym(SDL_LIBRARY,"SDL_GetQueuedAudioSize"));
	SDL::GetRGB = reinterpret_cast<PF_SDL_GetRGB>(dlsym(SDL_LIBRARY,"SDL_GetRGB"));
	SDL::GetRGBA = reinterpret_cast<PF_SDL_GetRGBA>(dlsym(SDL_LIBRARY,"SDL_GetRGBA"));
	SDL::GetRelativeMouseMode = reinterpret_cast<PF_SDL_GetRelativeMouseMode>(dlsym(SDL_LIBRARY,"SDL_GetRelativeMouseMode"));
	SDL::GetRelativeMouseState = reinterpret_cast<PF_SDL_GetRelativeMouseState>(dlsym(SDL_LIBRARY,"SDL_GetRelativeMouseState"));
	SDL::GetRenderDrawBlendMode = reinterpret_cast<PF_SDL_GetRenderDrawBlendMode>(dlsym(SDL_LIBRARY,"SDL_GetRenderDrawBlendMode"));
	SDL::GetRenderDrawColor = reinterpret_cast<PF_SDL_GetRenderDrawColor>(dlsym(SDL_LIBRARY,"SDL_GetRenderDrawColor"));
	SDL::GetRenderDriverInfo = reinterpret_cast<PF_SDL_GetRenderDriverInfo>(dlsym(SDL_LIBRARY,"SDL_GetRenderDriverInfo"));
	SDL::GetRenderTarget = reinterpret_cast<PF_SDL_GetRenderTarget>(dlsym(SDL_LIBRARY,"SDL_GetRenderTarget"));
	SDL::GetRenderer = reinterpret_cast<PF_SDL_GetRenderer>(dlsym(SDL_LIBRARY,"SDL_GetRenderer"));
	SDL::GetRendererInfo = reinterpret_cast<PF_SDL_GetRendererInfo>(dlsym(SDL_LIBRARY,"SDL_GetRendererInfo"));
	SDL::GetRendererOutputSize = reinterpret_cast<PF_SDL_GetRendererOutputSize>(dlsym(SDL_LIBRARY,"SDL_GetRendererOutputSize"));
	SDL::GetRevision = reinterpret_cast<PF_SDL_GetRevision>(dlsym(SDL_LIBRARY,"SDL_GetRevision"));
	SDL::GetRevisionNumber = reinterpret_cast<PF_SDL_GetRevisionNumber>(dlsym(SDL_LIBRARY,"SDL_GetRevisionNumber"));
	SDL::GetScancodeFromKey = reinterpret_cast<PF_SDL_GetScancodeFromKey>(dlsym(SDL_LIBRARY,"SDL_GetScancodeFromKey"));
	SDL::GetScancodeFromName = reinterpret_cast<PF_SDL_GetScancodeFromName>(dlsym(SDL_LIBRARY,"SDL_GetScancodeFromName"));
	SDL::GetScancodeName = reinterpret_cast<PF_SDL_GetScancodeName>(dlsym(SDL_LIBRARY,"SDL_GetScancodeName"));
	//pSDL_GetShapedWindowMode = reinterpret_cast<PF_SDL_GetShapedWindowMode>(dlsym(SDL_LIBRARY,"SDL_GetShapedWindowMode"));
	SDL::GetSurfaceAlphaMod = reinterpret_cast<PF_SDL_GetSurfaceAlphaMod>(dlsym(SDL_LIBRARY,"SDL_GetSurfaceAlphaMod"));
	SDL::GetSurfaceBlendMode = reinterpret_cast<PF_SDL_GetSurfaceBlendMode>(dlsym(SDL_LIBRARY,"SDL_GetSurfaceBlendMode"));
	SDL::GetSurfaceColorMod = reinterpret_cast<PF_SDL_GetSurfaceColorMod>(dlsym(SDL_LIBRARY,"SDL_GetSurfaceColorMod"));
	SDL::GetSystemRAM = reinterpret_cast<PF_SDL_GetSystemRAM>(dlsym(SDL_LIBRARY,"SDL_GetSystemRAM"));
	SDL::GetTextureAlphaMod = reinterpret_cast<PF_SDL_GetTextureAlphaMod>(dlsym(SDL_LIBRARY,"SDL_GetTextureAlphaMod"));
	SDL::GetTextureBlendMode = reinterpret_cast<PF_SDL_GetTextureBlendMode>(dlsym(SDL_LIBRARY,"SDL_GetTextureBlendMode"));
	SDL::GetTextureColorMod = reinterpret_cast<PF_SDL_GetTextureColorMod>(dlsym(SDL_LIBRARY,"SDL_GetTextureColorMod"));
	SDL::GetThreadID = reinterpret_cast<PF_SDL_GetThreadID>(dlsym(SDL_LIBRARY,"SDL_GetThreadID"));
	SDL::GetThreadName = reinterpret_cast<PF_SDL_GetThreadName>(dlsym(SDL_LIBRARY,"SDL_GetThreadName"));
	SDL::GetTicks = reinterpret_cast<PF_SDL_GetTicks>(dlsym(SDL_LIBRARY,"SDL_GetTicks"));
	SDL::GetTouchDevice = reinterpret_cast<PF_SDL_GetTouchDevice>(dlsym(SDL_LIBRARY,"SDL_GetTouchDevice"));
	SDL::GetTouchFinger = reinterpret_cast<PF_SDL_GetTouchFinger>(dlsym(SDL_LIBRARY,"SDL_GetTouchFinger"));
	SDL::GetVersion = reinterpret_cast<PF_SDL_GetVersion>(dlsym(SDL_LIBRARY,"SDL_GetVersion"));
	SDL::GetVideoDriver = reinterpret_cast<PF_SDL_GetVideoDriver>(dlsym(SDL_LIBRARY,"SDL_GetVideoDriver"));
	SDL::GetWindowBrightness = reinterpret_cast<PF_SDL_GetWindowBrightness>(dlsym(SDL_LIBRARY,"SDL_GetWindowBrightness"));
	SDL::GetWindowData = reinterpret_cast<PF_SDL_GetWindowData>(dlsym(SDL_LIBRARY,"SDL_GetWindowData"));
	SDL::GetWindowDisplayIndex = reinterpret_cast<PF_SDL_GetWindowDisplayIndex>(dlsym(SDL_LIBRARY,"SDL_GetWindowDisplayIndex"));
	SDL::GetWindowDisplayMode = reinterpret_cast<PF_SDL_GetWindowDisplayMode>(dlsym(SDL_LIBRARY,"SDL_GetWindowDisplayMode"));
	SDL::GetWindowFlags = reinterpret_cast<PF_SDL_GetWindowFlags>(dlsym(SDL_LIBRARY,"SDL_GetWindowFlags"));
	SDL::GetWindowFromID = reinterpret_cast<PF_SDL_GetWindowFromID>(dlsym(SDL_LIBRARY,"SDL_GetWindowFromID"));
	SDL::GetWindowGammaRamp = reinterpret_cast<PF_SDL_GetWindowGammaRamp>(dlsym(SDL_LIBRARY,"SDL_GetWindowGammaRamp"));
	SDL::GetWindowGrab = reinterpret_cast<PF_SDL_GetWindowGrab>(dlsym(SDL_LIBRARY,"SDL_GetWindowGrab"));
	SDL::GetWindowID = reinterpret_cast<PF_SDL_GetWindowID>(dlsym(SDL_LIBRARY,"SDL_GetWindowID"));
	SDL::GetWindowMaximumSize = reinterpret_cast<PF_SDL_GetWindowMaximumSize>(dlsym(SDL_LIBRARY,"SDL_GetWindowMaximumSize"));
	SDL::GetWindowMinimumSize = reinterpret_cast<PF_SDL_GetWindowMinimumSize>(dlsym(SDL_LIBRARY,"SDL_GetWindowMinimumSize"));
	SDL::GetWindowPixelFormat = reinterpret_cast<PF_SDL_GetWindowPixelFormat>(dlsym(SDL_LIBRARY,"SDL_GetWindowPixelFormat"));
	SDL::GetWindowPosition = reinterpret_cast<PF_SDL_GetWindowPosition>(dlsym(SDL_LIBRARY,"SDL_GetWindowPosition"));
	SDL::GetWindowSize = reinterpret_cast<PF_SDL_GetWindowSize>(dlsym(SDL_LIBRARY,"SDL_GetWindowSize"));
	SDL::GetWindowSurface = reinterpret_cast<PF_SDL_GetWindowSurface>(dlsym(SDL_LIBRARY,"SDL_GetWindowSurface"));
	SDL::GetWindowTitle = reinterpret_cast<PF_SDL_GetWindowTitle>(dlsym(SDL_LIBRARY,"SDL_GetWindowTitle"));
	//pSDL_GetWindowWMInfo = reinterpret_cast<PF_SDL_GetWindowWMInfo>(dlsym(SDL_LIBRARY,"SDL_GetWindowWMInfo"));
	SDL::HapticClose = reinterpret_cast<PF_SDL_HapticClose>(dlsym(SDL_LIBRARY,"SDL_HapticClose"));
	SDL::HapticDestroyEffect = reinterpret_cast<PF_SDL_HapticDestroyEffect>(dlsym(SDL_LIBRARY,"SDL_HapticDestroyEffect"));
	SDL::HapticEffectSupported = reinterpret_cast<PF_SDL_HapticEffectSupported>(dlsym(SDL_LIBRARY,"SDL_HapticEffectSupported"));
	SDL::HapticGetEffectStatus = reinterpret_cast<PF_SDL_HapticGetEffectStatus>(dlsym(SDL_LIBRARY,"SDL_HapticGetEffectStatus"));
	SDL::HapticIndex = reinterpret_cast<PF_SDL_HapticIndex>(dlsym(SDL_LIBRARY,"SDL_HapticIndex"));
	SDL::HapticName = reinterpret_cast<PF_SDL_HapticName>(dlsym(SDL_LIBRARY,"SDL_HapticName"));
	SDL::HapticNewEffect = reinterpret_cast<PF_SDL_HapticNewEffect>(dlsym(SDL_LIBRARY,"SDL_HapticNewEffect"));
	SDL::HapticNumAxes = reinterpret_cast<PF_SDL_HapticNumAxes>(dlsym(SDL_LIBRARY,"SDL_HapticNumAxes"));
	SDL::HapticNumEffects = reinterpret_cast<PF_SDL_HapticNumEffects>(dlsym(SDL_LIBRARY,"SDL_HapticNumEffects"));
	SDL::HapticNumEffectsPlaying = reinterpret_cast<PF_SDL_HapticNumEffectsPlaying>(dlsym(SDL_LIBRARY,"SDL_HapticNumEffectsPlaying"));
	SDL::HapticOpen = reinterpret_cast<PF_SDL_HapticOpen>(dlsym(SDL_LIBRARY,"SDL_HapticOpen"));
	SDL::HapticOpenFromJoystick = reinterpret_cast<PF_SDL_HapticOpenFromJoystick>(dlsym(SDL_LIBRARY,"SDL_HapticOpenFromJoystick"));
	SDL::HapticOpenFromMouse = reinterpret_cast<PF_SDL_HapticOpenFromMouse>(dlsym(SDL_LIBRARY,"SDL_HapticOpenFromMouse"));
	SDL::HapticOpened = reinterpret_cast<PF_SDL_HapticOpened>(dlsym(SDL_LIBRARY,"SDL_HapticOpened"));
	SDL::HapticPause = reinterpret_cast<PF_SDL_HapticPause>(dlsym(SDL_LIBRARY,"SDL_HapticPause"));
	SDL::HapticQuery = reinterpret_cast<PF_SDL_HapticQuery>(dlsym(SDL_LIBRARY,"SDL_HapticQuery"));
	SDL::HapticRumbleInit = reinterpret_cast<PF_SDL_HapticRumbleInit>(dlsym(SDL_LIBRARY,"SDL_HapticRumbleInit"));
	SDL::HapticRumblePlay = reinterpret_cast<PF_SDL_HapticRumblePlay>(dlsym(SDL_LIBRARY,"SDL_HapticRumblePlay"));
	SDL::HapticRumbleStop = reinterpret_cast<PF_SDL_HapticRumbleStop>(dlsym(SDL_LIBRARY,"SDL_HapticRumbleStop"));
	SDL::HapticRumbleSupported = reinterpret_cast<PF_SDL_HapticRumbleSupported>(dlsym(SDL_LIBRARY,"SDL_HapticRumbleSupported"));
	SDL::HapticRunEffect = reinterpret_cast<PF_SDL_HapticRunEffect>(dlsym(SDL_LIBRARY,"SDL_HapticRunEffect"));
	SDL::HapticSetAutocenter = reinterpret_cast<PF_SDL_HapticSetAutocenter>(dlsym(SDL_LIBRARY,"SDL_HapticSetAutocenter"));
	SDL::HapticSetGain = reinterpret_cast<PF_SDL_HapticSetGain>(dlsym(SDL_LIBRARY,"SDL_HapticSetGain"));
	SDL::HapticStopAll = reinterpret_cast<PF_SDL_HapticStopAll>(dlsym(SDL_LIBRARY,"SDL_HapticStopAll"));
	SDL::HapticStopEffect = reinterpret_cast<PF_SDL_HapticStopEffect>(dlsym(SDL_LIBRARY,"SDL_HapticStopEffect"));
	SDL::HapticUnpause = reinterpret_cast<PF_SDL_HapticUnpause>(dlsym(SDL_LIBRARY,"SDL_HapticUnpause"));
	SDL::HapticUpdateEffect = reinterpret_cast<PF_SDL_HapticUpdateEffect>(dlsym(SDL_LIBRARY,"SDL_HapticUpdateEffect"));
	SDL::Has3DNow = reinterpret_cast<PF_SDL_Has3DNow>(dlsym(SDL_LIBRARY,"SDL_Has3DNow"));
	SDL::HasAVX = reinterpret_cast<PF_SDL_HasAVX>(dlsym(SDL_LIBRARY,"SDL_HasAVX"));
	SDL::HasAVX2 = reinterpret_cast<PF_SDL_HasAVX2>(dlsym(SDL_LIBRARY,"SDL_HasAVX2"));
	SDL::HasAltiVec = reinterpret_cast<PF_SDL_HasAltiVec>(dlsym(SDL_LIBRARY,"SDL_HasAltiVec"));
	SDL::HasClipboardText = reinterpret_cast<PF_SDL_HasClipboardText>(dlsym(SDL_LIBRARY,"SDL_HasClipboardText"));
	SDL::HasEvent = reinterpret_cast<PF_SDL_HasEvent>(dlsym(SDL_LIBRARY,"SDL_HasEvent"));
	SDL::HasEvents = reinterpret_cast<PF_SDL_HasEvents>(dlsym(SDL_LIBRARY,"SDL_HasEvents"));
	SDL::HasIntersection = reinterpret_cast<PF_SDL_HasIntersection>(dlsym(SDL_LIBRARY,"SDL_HasIntersection"));
	SDL::HasMMX = reinterpret_cast<PF_SDL_HasMMX>(dlsym(SDL_LIBRARY,"SDL_HasMMX"));
	SDL::HasRDTSC = reinterpret_cast<PF_SDL_HasRDTSC>(dlsym(SDL_LIBRARY,"SDL_HasRDTSC"));
	SDL::HasSSE = reinterpret_cast<PF_SDL_HasSSE>(dlsym(SDL_LIBRARY,"SDL_HasSSE"));
	SDL::HasSSE2 = reinterpret_cast<PF_SDL_HasSSE2>(dlsym(SDL_LIBRARY,"SDL_HasSSE2"));
	SDL::HasSSE3 = reinterpret_cast<PF_SDL_HasSSE3>(dlsym(SDL_LIBRARY,"SDL_HasSSE3"));
	SDL::HasSSE41 = reinterpret_cast<PF_SDL_HasSSE41>(dlsym(SDL_LIBRARY,"SDL_HasSSE41"));
	SDL::HasSSE42 = reinterpret_cast<PF_SDL_HasSSE42>(dlsym(SDL_LIBRARY,"SDL_HasSSE42"));
	SDL::HasScreenKeyboardSupport = reinterpret_cast<PF_SDL_HasScreenKeyboardSupport>(dlsym(SDL_LIBRARY,"SDL_HasScreenKeyboardSupport"));
	SDL::HideWindow = reinterpret_cast<PF_SDL_HideWindow>(dlsym(SDL_LIBRARY,"SDL_HideWindow"));
	SDL::Init = reinterpret_cast<PF_SDL_Init>(dlsym(SDL_LIBRARY,"SDL_Init"));
	SDL::InitSubSystem = reinterpret_cast<PF_SDL_InitSubSystem>(dlsym(SDL_LIBRARY,"SDL_InitSubSystem"));
	SDL::IntersectRect = reinterpret_cast<PF_SDL_IntersectRect>(dlsym(SDL_LIBRARY,"SDL_IntersectRect"));
	SDL::IntersectRectAndLine = reinterpret_cast<PF_SDL_IntersectRectAndLine>(dlsym(SDL_LIBRARY,"SDL_IntersectRectAndLine"));
	SDL::IsGameController = reinterpret_cast<PF_SDL_IsGameController>(dlsym(SDL_LIBRARY,"SDL_IsGameController"));
	SDL::IsScreenKeyboardShown = reinterpret_cast<PF_SDL_IsScreenKeyboardShown>(dlsym(SDL_LIBRARY,"SDL_IsScreenKeyboardShown"));
	SDL::IsScreenSaverEnabled = reinterpret_cast<PF_SDL_IsScreenSaverEnabled>(dlsym(SDL_LIBRARY,"SDL_IsScreenSaverEnabled"));
	//pSDL_IsShapedWindow = reinterpret_cast<PF_SDL_IsShapedWindow>(dlsym(SDL_LIBRARY,"SDL_IsShapedWindow"));
	SDL::IsTextInputActive = reinterpret_cast<PF_SDL_IsTextInputActive>(dlsym(SDL_LIBRARY,"SDL_IsTextInputActive"));
	SDL::JoystickClose = reinterpret_cast<PF_SDL_JoystickClose>(dlsym(SDL_LIBRARY,"SDL_JoystickClose"));
	SDL::JoystickCurrentPowerLevel = reinterpret_cast<PF_SDL_JoystickCurrentPowerLevel>(dlsym(SDL_LIBRARY,"SDL_JoystickCurrentPowerLevel"));
	SDL::JoystickEventState = reinterpret_cast<PF_SDL_JoystickEventState>(dlsym(SDL_LIBRARY,"SDL_JoystickEventState"));
	SDL::JoystickFromInstanceID = reinterpret_cast<PF_SDL_JoystickFromInstanceID>(dlsym(SDL_LIBRARY,"SDL_JoystickFromInstanceID"));
	SDL::JoystickGetAttached = reinterpret_cast<PF_SDL_JoystickGetAttached>(dlsym(SDL_LIBRARY,"SDL_JoystickGetAttached"));
	SDL::JoystickGetAxis = reinterpret_cast<PF_SDL_JoystickGetAxis>(dlsym(SDL_LIBRARY,"SDL_JoystickGetAxis"));
	SDL::JoystickGetBall = reinterpret_cast<PF_SDL_JoystickGetBall>(dlsym(SDL_LIBRARY,"SDL_JoystickGetBall"));
	SDL::JoystickGetButton = reinterpret_cast<PF_SDL_JoystickGetButton>(dlsym(SDL_LIBRARY,"SDL_JoystickGetButton"));
	SDL::JoystickGetDeviceGUID = reinterpret_cast<PF_SDL_JoystickGetDeviceGUID>(dlsym(SDL_LIBRARY,"SDL_JoystickGetDeviceGUID"));
	SDL::JoystickGetGUID = reinterpret_cast<PF_SDL_JoystickGetGUID>(dlsym(SDL_LIBRARY,"SDL_JoystickGetGUID"));
	SDL::JoystickGetGUIDFromString = reinterpret_cast<PF_SDL_JoystickGetGUIDFromString>(dlsym(SDL_LIBRARY,"SDL_JoystickGetGUIDFromString"));
	SDL::JoystickGetGUIDString = reinterpret_cast<PF_SDL_JoystickGetGUIDString>(dlsym(SDL_LIBRARY,"SDL_JoystickGetGUIDString"));
	SDL::JoystickGetHat = reinterpret_cast<PF_SDL_JoystickGetHat>(dlsym(SDL_LIBRARY,"SDL_JoystickGetHat"));
	SDL::JoystickInstanceID = reinterpret_cast<PF_SDL_JoystickInstanceID>(dlsym(SDL_LIBRARY,"SDL_JoystickInstanceID"));
	SDL::JoystickIsHaptic = reinterpret_cast<PF_SDL_JoystickIsHaptic>(dlsym(SDL_LIBRARY,"SDL_JoystickIsHaptic"));
	SDL::JoystickName = reinterpret_cast<PF_SDL_JoystickName>(dlsym(SDL_LIBRARY,"SDL_JoystickName"));
	SDL::JoystickNameForIndex = reinterpret_cast<PF_SDL_JoystickNameForIndex>(dlsym(SDL_LIBRARY,"SDL_JoystickNameForIndex"));
	SDL::JoystickNumAxes = reinterpret_cast<PF_SDL_JoystickNumAxes>(dlsym(SDL_LIBRARY,"SDL_JoystickNumAxes"));
	SDL::JoystickNumBalls = reinterpret_cast<PF_SDL_JoystickNumBalls>(dlsym(SDL_LIBRARY,"SDL_JoystickNumBalls"));
	SDL::JoystickNumButtons = reinterpret_cast<PF_SDL_JoystickNumButtons>(dlsym(SDL_LIBRARY,"SDL_JoystickNumButtons"));
	SDL::JoystickNumHats = reinterpret_cast<PF_SDL_JoystickNumHats>(dlsym(SDL_LIBRARY,"SDL_JoystickNumHats"));
	SDL::JoystickOpen = reinterpret_cast<PF_SDL_JoystickOpen>(dlsym(SDL_LIBRARY,"SDL_JoystickOpen"));
	SDL::JoystickUpdate = reinterpret_cast<PF_SDL_JoystickUpdate>(dlsym(SDL_LIBRARY,"SDL_JoystickUpdate"));
	SDL::LoadBMP_RW = reinterpret_cast<PF_SDL_LoadBMP_RW>(dlsym(SDL_LIBRARY,"SDL_LoadBMP_RW"));
	SDL::LoadDollarTemplates = reinterpret_cast<PF_SDL_LoadDollarTemplates>(dlsym(SDL_LIBRARY,"SDL_LoadDollarTemplates"));
	SDL::LoadFunction = reinterpret_cast<PF_SDL_LoadFunction>(dlsym(SDL_LIBRARY,"SDL_LoadFunction"));
	SDL::LoadObject = reinterpret_cast<PF_SDL_LoadObject>(dlsym(SDL_LIBRARY,"SDL_LoadObject"));
	SDL::LoadWAV_RW = reinterpret_cast<PF_SDL_LoadWAV_RW>(dlsym(SDL_LIBRARY,"SDL_LoadWAV_RW"));
	SDL::LockAudio = reinterpret_cast<PF_SDL_LockAudio>(dlsym(SDL_LIBRARY,"SDL_LockAudio"));
	SDL::LockAudioDevice = reinterpret_cast<PF_SDL_LockAudioDevice>(dlsym(SDL_LIBRARY,"SDL_LockAudioDevice"));
	SDL::LockMutex = reinterpret_cast<PF_SDL_LockMutex>(dlsym(SDL_LIBRARY,"SDL_LockMutex"));
	SDL::LockSurface = reinterpret_cast<PF_SDL_LockSurface>(dlsym(SDL_LIBRARY,"SDL_LockSurface"));
	SDL::LockTexture = reinterpret_cast<PF_SDL_LockTexture>(dlsym(SDL_LIBRARY,"SDL_LockTexture"));
	SDL::Log = reinterpret_cast<PF_SDL_Log>(dlsym(SDL_LIBRARY,"SDL_Log"));
	SDL::LogCritical = reinterpret_cast<PF_SDL_LogCritical>(dlsym(SDL_LIBRARY,"SDL_LogCritical"));
	SDL::LogDebug = reinterpret_cast<PF_SDL_LogDebug>(dlsym(SDL_LIBRARY,"SDL_LogDebug"));
	SDL::LogError = reinterpret_cast<PF_SDL_LogError>(dlsym(SDL_LIBRARY,"SDL_LogError"));
	SDL::LogGetOutputFunction = reinterpret_cast<PF_SDL_LogGetOutputFunction>(dlsym(SDL_LIBRARY,"SDL_LogGetOutputFunction"));
	SDL::LogGetPriority = reinterpret_cast<PF_SDL_LogGetPriority>(dlsym(SDL_LIBRARY,"SDL_LogGetPriority"));
	SDL::LogInfo = reinterpret_cast<PF_SDL_LogInfo>(dlsym(SDL_LIBRARY,"SDL_LogInfo"));
	SDL::LogMessage = reinterpret_cast<PF_SDL_LogMessage>(dlsym(SDL_LIBRARY,"SDL_LogMessage"));
	SDL::LogMessageV = reinterpret_cast<PF_SDL_LogMessageV>(dlsym(SDL_LIBRARY,"SDL_LogMessageV"));
	SDL::LogResetPriorities = reinterpret_cast<PF_SDL_LogResetPriorities>(dlsym(SDL_LIBRARY,"SDL_LogResetPriorities"));
	SDL::LogSetAllPriority = reinterpret_cast<PF_SDL_LogSetAllPriority>(dlsym(SDL_LIBRARY,"SDL_LogSetAllPriority"));
	SDL::LogSetOutputFunction = reinterpret_cast<PF_SDL_LogSetOutputFunction>(dlsym(SDL_LIBRARY,"SDL_LogSetOutputFunction"));
	SDL::LogSetPriority = reinterpret_cast<PF_SDL_LogSetPriority>(dlsym(SDL_LIBRARY,"SDL_LogSetPriority"));
	SDL::LogVerbose = reinterpret_cast<PF_SDL_LogVerbose>(dlsym(SDL_LIBRARY,"SDL_LogVerbose"));
	SDL::LogWarn = reinterpret_cast<PF_SDL_LogWarn>(dlsym(SDL_LIBRARY,"SDL_LogWarn"));
	SDL::LowerBlit = reinterpret_cast<PF_SDL_LowerBlit>(dlsym(SDL_LIBRARY,"SDL_LowerBlit"));
	SDL::LowerBlitScaled = reinterpret_cast<PF_SDL_LowerBlitScaled>(dlsym(SDL_LIBRARY,"SDL_LowerBlitScaled"));
	SDL::MapRGB = reinterpret_cast<PF_SDL_MapRGB>(dlsym(SDL_LIBRARY,"SDL_MapRGB"));
	SDL::MapRGBA = reinterpret_cast<PF_SDL_MapRGBA>(dlsym(SDL_LIBRARY,"SDL_MapRGBA"));
	SDL::MasksToPixelFormatEnum = reinterpret_cast<PF_SDL_MasksToPixelFormatEnum>(dlsym(SDL_LIBRARY,"SDL_MasksToPixelFormatEnum"));
	SDL::MaximizeWindow = reinterpret_cast<PF_SDL_MaximizeWindow>(dlsym(SDL_LIBRARY,"SDL_MaximizeWindow"));
	//pSDL_MemoryBarrierAcquire = reinterpret_cast<PF_SDL_MemoryBarrierAcquire>(dlsym(SDL_LIBRARY,"SDL_MemoryBarrierAcquire"));
	//pSDL_MemoryBarrierRelease = reinterpret_cast<PF_SDL_MemoryBarrierRelease>(dlsym(SDL_LIBRARY,"SDL_MemoryBarrierRelease"));
	SDL::MinimizeWindow = reinterpret_cast<PF_SDL_MinimizeWindow>(dlsym(SDL_LIBRARY,"SDL_MinimizeWindow"));
	SDL::MixAudio = reinterpret_cast<PF_SDL_MixAudio>(dlsym(SDL_LIBRARY,"SDL_MixAudio"));
	SDL::MixAudioFormat = reinterpret_cast<PF_SDL_MixAudioFormat>(dlsym(SDL_LIBRARY,"SDL_MixAudioFormat"));
	//pSDL_MostSignificantBitIndex32 = reinterpret_cast<PF_SDL_MostSignificantBitIndex32>(dlsym(SDL_LIBRARY,"SDL_MostSignificantBitIndex32"));
	SDL::MouseIsHaptic = reinterpret_cast<PF_SDL_MouseIsHaptic>(dlsym(SDL_LIBRARY,"SDL_MouseIsHaptic"));
	SDL::NumHaptics = reinterpret_cast<PF_SDL_NumHaptics>(dlsym(SDL_LIBRARY,"SDL_NumHaptics"));
	SDL::NumJoysticks = reinterpret_cast<PF_SDL_NumJoysticks>(dlsym(SDL_LIBRARY,"SDL_NumJoysticks"));
	SDL::OpenAudio = reinterpret_cast<PF_SDL_OpenAudio>(dlsym(SDL_LIBRARY,"SDL_OpenAudio"));
	SDL::OpenAudioDevice = reinterpret_cast<PF_SDL_OpenAudioDevice>(dlsym(SDL_LIBRARY,"SDL_OpenAudioDevice"));
	SDL::PauseAudio = reinterpret_cast<PF_SDL_PauseAudio>(dlsym(SDL_LIBRARY,"SDL_PauseAudio"));
	SDL::PauseAudioDevice = reinterpret_cast<PF_SDL_PauseAudioDevice>(dlsym(SDL_LIBRARY,"SDL_PauseAudioDevice"));
	SDL::PeepEvents = reinterpret_cast<PF_SDL_PeepEvents>(dlsym(SDL_LIBRARY,"SDL_PeepEvents"));
	SDL::PixelFormatEnumToMasks = reinterpret_cast<PF_SDL_PixelFormatEnumToMasks>(dlsym(SDL_LIBRARY,"SDL_PixelFormatEnumToMasks"));
	SDL::PointInRect = reinterpret_cast<PF_SDL_PointInRect>(dlsym(SDL_LIBRARY,"SDL_PointInRect"));
	SDL::PollEvent = reinterpret_cast<PF_SDL_PollEvent>(dlsym(SDL_LIBRARY,"SDL_PollEvent"));
	SDL::PumpEvents = reinterpret_cast<PF_SDL_PumpEvents>(dlsym(SDL_LIBRARY,"SDL_PumpEvents"));
	SDL::PushEvent = reinterpret_cast<PF_SDL_PushEvent>(dlsym(SDL_LIBRARY,"SDL_PushEvent"));
	SDL::QueryTexture = reinterpret_cast<PF_SDL_QueryTexture>(dlsym(SDL_LIBRARY,"SDL_QueryTexture"));
	SDL::QueueAudio = reinterpret_cast<PF_SDL_QueueAudio>(dlsym(SDL_LIBRARY,"SDL_QueueAudio"));
	SDL::Quit = reinterpret_cast<PF_SDL_Quit>(dlsym(SDL_LIBRARY,"SDL_Quit"));
	SDL::QuitSubSystem = reinterpret_cast<PF_SDL_QuitSubSystem>(dlsym(SDL_LIBRARY,"SDL_QuitSubSystem"));
	SDL::RWFromConstMem = reinterpret_cast<PF_SDL_RWFromConstMem>(dlsym(SDL_LIBRARY,"SDL_RWFromConstMem"));
	SDL::RWFromFP = reinterpret_cast<PF_SDL_RWFromFP>(dlsym(SDL_LIBRARY,"SDL_RWFromFP"));
	SDL::RWFromFP = reinterpret_cast<PF_SDL_RWFromFP>(dlsym(SDL_LIBRARY,"SDL_RWFromFP"));
	SDL::RWFromFile = reinterpret_cast<PF_SDL_RWFromFile>(dlsym(SDL_LIBRARY,"SDL_RWFromFile"));
	SDL::RWFromMem = reinterpret_cast<PF_SDL_RWFromMem>(dlsym(SDL_LIBRARY,"SDL_RWFromMem"));
	SDL::RaiseWindow = reinterpret_cast<PF_SDL_RaiseWindow>(dlsym(SDL_LIBRARY,"SDL_RaiseWindow"));
	SDL::ReadBE16 = reinterpret_cast<PF_SDL_ReadBE16>(dlsym(SDL_LIBRARY,"SDL_ReadBE16"));
	SDL::ReadBE32 = reinterpret_cast<PF_SDL_ReadBE32>(dlsym(SDL_LIBRARY,"SDL_ReadBE32"));
	SDL::ReadBE64 = reinterpret_cast<PF_SDL_ReadBE64>(dlsym(SDL_LIBRARY,"SDL_ReadBE64"));
	SDL::ReadLE16 = reinterpret_cast<PF_SDL_ReadLE16>(dlsym(SDL_LIBRARY,"SDL_ReadLE16"));
	SDL::ReadLE32 = reinterpret_cast<PF_SDL_ReadLE32>(dlsym(SDL_LIBRARY,"SDL_ReadLE32"));
	SDL::ReadLE64 = reinterpret_cast<PF_SDL_ReadLE64>(dlsym(SDL_LIBRARY,"SDL_ReadLE64"));
	SDL::ReadU8 = reinterpret_cast<PF_SDL_ReadU8>(dlsym(SDL_LIBRARY,"SDL_ReadU8"));
	SDL::RecordGesture = reinterpret_cast<PF_SDL_RecordGesture>(dlsym(SDL_LIBRARY,"SDL_RecordGesture"));
	SDL::RectEmpty = reinterpret_cast<PF_SDL_RectEmpty>(dlsym(SDL_LIBRARY,"SDL_RectEmpty"));
	SDL::RectEquals = reinterpret_cast<PF_SDL_RectEquals>(dlsym(SDL_LIBRARY,"SDL_RectEquals"));
	//pSDL_RegisterApp = reinterpret_cast<PF_SDL_RegisterApp>(dlsym(SDL_LIBRARY,"SDL_RegisterApp"));
	SDL::RegisterEvents = reinterpret_cast<PF_SDL_RegisterEvents>(dlsym(SDL_LIBRARY,"SDL_RegisterEvents"));
	SDL::RemoveTimer = reinterpret_cast<PF_SDL_RemoveTimer>(dlsym(SDL_LIBRARY,"SDL_RemoveTimer"));
	SDL::RenderClear = reinterpret_cast<PF_SDL_RenderClear>(dlsym(SDL_LIBRARY,"SDL_RenderClear"));
	SDL::RenderCopy = reinterpret_cast<PF_SDL_RenderCopy>(dlsym(SDL_LIBRARY,"SDL_RenderCopy"));
	SDL::RenderCopyEx = reinterpret_cast<PF_SDL_RenderCopyEx>(dlsym(SDL_LIBRARY,"SDL_RenderCopyEx"));
	SDL::RenderDrawLine = reinterpret_cast<PF_SDL_RenderDrawLine>(dlsym(SDL_LIBRARY,"SDL_RenderDrawLine"));
	SDL::RenderDrawLines = reinterpret_cast<PF_SDL_RenderDrawLines>(dlsym(SDL_LIBRARY,"SDL_RenderDrawLines"));
	SDL::RenderDrawPoint = reinterpret_cast<PF_SDL_RenderDrawPoint>(dlsym(SDL_LIBRARY,"SDL_RenderDrawPoint"));
	SDL::RenderDrawPoints = reinterpret_cast<PF_SDL_RenderDrawPoints>(dlsym(SDL_LIBRARY,"SDL_RenderDrawPoints"));
	SDL::RenderDrawRect = reinterpret_cast<PF_SDL_RenderDrawRect>(dlsym(SDL_LIBRARY,"SDL_RenderDrawRect"));
	SDL::RenderDrawRects = reinterpret_cast<PF_SDL_RenderDrawRects>(dlsym(SDL_LIBRARY,"SDL_RenderDrawRects"));
	SDL::RenderFillRect = reinterpret_cast<PF_SDL_RenderFillRect>(dlsym(SDL_LIBRARY,"SDL_RenderFillRect"));
	SDL::RenderFillRects = reinterpret_cast<PF_SDL_RenderFillRects>(dlsym(SDL_LIBRARY,"SDL_RenderFillRects"));
	SDL::RenderGetClipRect = reinterpret_cast<PF_SDL_RenderGetClipRect>(dlsym(SDL_LIBRARY,"SDL_RenderGetClipRect"));
	//pSDL_RenderGetD3D9Device = reinterpret_cast<PF_SDL_RenderGetD3D9Device>(dlsym(SDL_LIBRARY,"SDL_RenderGetD3D9Device"));
	SDL::RenderGetLogicalSize = reinterpret_cast<PF_SDL_RenderGetLogicalSize>(dlsym(SDL_LIBRARY,"SDL_RenderGetLogicalSize"));
	SDL::RenderGetScale = reinterpret_cast<PF_SDL_RenderGetScale>(dlsym(SDL_LIBRARY,"SDL_RenderGetScale"));
	SDL::RenderGetViewport = reinterpret_cast<PF_SDL_RenderGetViewport>(dlsym(SDL_LIBRARY,"SDL_RenderGetViewport"));
	SDL::RenderIsClipEnabled = reinterpret_cast<PF_SDL_RenderIsClipEnabled>(dlsym(SDL_LIBRARY,"SDL_RenderIsClipEnabled"));
	SDL::RenderPresent = reinterpret_cast<PF_SDL_RenderPresent>(dlsym(SDL_LIBRARY,"SDL_RenderPresent"));
	SDL::RenderReadPixels = reinterpret_cast<PF_SDL_RenderReadPixels>(dlsym(SDL_LIBRARY,"SDL_RenderReadPixels"));
	SDL::RenderSetClipRect = reinterpret_cast<PF_SDL_RenderSetClipRect>(dlsym(SDL_LIBRARY,"SDL_RenderSetClipRect"));
	SDL::RenderSetLogicalSize = reinterpret_cast<PF_SDL_RenderSetLogicalSize>(dlsym(SDL_LIBRARY,"SDL_RenderSetLogicalSize"));
	SDL::RenderSetScale = reinterpret_cast<PF_SDL_RenderSetScale>(dlsym(SDL_LIBRARY,"SDL_RenderSetScale"));
	SDL::RenderSetViewport = reinterpret_cast<PF_SDL_RenderSetViewport>(dlsym(SDL_LIBRARY,"SDL_RenderSetViewport"));
	SDL::RenderTargetSupported = reinterpret_cast<PF_SDL_RenderTargetSupported>(dlsym(SDL_LIBRARY,"SDL_RenderTargetSupported"));
	SDL::ReportAssertion = reinterpret_cast<PF_SDL_ReportAssertion>(dlsym(SDL_LIBRARY,"SDL_ReportAssertion"));
	SDL::ResetAssertionReport = reinterpret_cast<PF_SDL_ResetAssertionReport>(dlsym(SDL_LIBRARY,"SDL_ResetAssertionReport"));
	SDL::RestoreWindow = reinterpret_cast<PF_SDL_RestoreWindow>(dlsym(SDL_LIBRARY,"SDL_RestoreWindow"));
	SDL::SaveAllDollarTemplates = reinterpret_cast<PF_SDL_SaveAllDollarTemplates>(dlsym(SDL_LIBRARY,"SDL_SaveAllDollarTemplates"));
	SDL::SaveBMP_RW = reinterpret_cast<PF_SDL_SaveBMP_RW>(dlsym(SDL_LIBRARY,"SDL_SaveBMP_RW"));
	SDL::SaveDollarTemplate = reinterpret_cast<PF_SDL_SaveDollarTemplate>(dlsym(SDL_LIBRARY,"SDL_SaveDollarTemplate"));
	SDL::SemPost = reinterpret_cast<PF_SDL_SemPost>(dlsym(SDL_LIBRARY,"SDL_SemPost"));
	SDL::SemTryWait = reinterpret_cast<PF_SDL_SemTryWait>(dlsym(SDL_LIBRARY,"SDL_SemTryWait"));
	SDL::SemValue = reinterpret_cast<PF_SDL_SemValue>(dlsym(SDL_LIBRARY,"SDL_SemValue"));
	SDL::SemWait = reinterpret_cast<PF_SDL_SemWait>(dlsym(SDL_LIBRARY,"SDL_SemWait"));
	SDL::SemWaitTimeout = reinterpret_cast<PF_SDL_SemWaitTimeout>(dlsym(SDL_LIBRARY,"SDL_SemWaitTimeout"));
	SDL::SetAssertionHandler = reinterpret_cast<PF_SDL_SetAssertionHandler>(dlsym(SDL_LIBRARY,"SDL_SetAssertionHandler"));
	SDL::SetClipRect = reinterpret_cast<PF_SDL_SetClipRect>(dlsym(SDL_LIBRARY,"SDL_SetClipRect"));
	SDL::SetClipboardText = reinterpret_cast<PF_SDL_SetClipboardText>(dlsym(SDL_LIBRARY,"SDL_SetClipboardText"));
	SDL::SetColorKey = reinterpret_cast<PF_SDL_SetColorKey>(dlsym(SDL_LIBRARY,"SDL_SetColorKey"));
	SDL::SetCursor = reinterpret_cast<PF_SDL_SetCursor>(dlsym(SDL_LIBRARY,"SDL_SetCursor"));
	SDL::SetError = reinterpret_cast<PF_SDL_SetError>(dlsym(SDL_LIBRARY,"SDL_SetError"));
	SDL::SetEventFilter = reinterpret_cast<PF_SDL_SetEventFilter>(dlsym(SDL_LIBRARY,"SDL_SetEventFilter"));
	SDL::SetHint = reinterpret_cast<PF_SDL_SetHint>(dlsym(SDL_LIBRARY,"SDL_SetHint"));
	SDL::SetHintWithPriority = reinterpret_cast<PF_SDL_SetHintWithPriority>(dlsym(SDL_LIBRARY,"SDL_SetHintWithPriority"));
	SDL::SetMainReady = reinterpret_cast<PF_SDL_SetMainReady>(dlsym(SDL_LIBRARY,"SDL_SetMainReady"));
	SDL::SetModState = reinterpret_cast<PF_SDL_SetModState>(dlsym(SDL_LIBRARY,"SDL_SetModState"));
	SDL::SetPaletteColors = reinterpret_cast<PF_SDL_SetPaletteColors>(dlsym(SDL_LIBRARY,"SDL_SetPaletteColors"));
	SDL::SetPixelFormatPalette = reinterpret_cast<PF_SDL_SetPixelFormatPalette>(dlsym(SDL_LIBRARY,"SDL_SetPixelFormatPalette"));
	SDL::SetRelativeMouseMode = reinterpret_cast<PF_SDL_SetRelativeMouseMode>(dlsym(SDL_LIBRARY,"SDL_SetRelativeMouseMode"));
	SDL::SetRenderDrawBlendMode = reinterpret_cast<PF_SDL_SetRenderDrawBlendMode>(dlsym(SDL_LIBRARY,"SDL_SetRenderDrawBlendMode"));
	SDL::SetRenderDrawColor = reinterpret_cast<PF_SDL_SetRenderDrawColor>(dlsym(SDL_LIBRARY,"SDL_SetRenderDrawColor"));
	SDL::SetRenderTarget = reinterpret_cast<PF_SDL_SetRenderTarget>(dlsym(SDL_LIBRARY,"SDL_SetRenderTarget"));
	SDL::SetSurfaceAlphaMod = reinterpret_cast<PF_SDL_SetSurfaceAlphaMod>(dlsym(SDL_LIBRARY,"SDL_SetSurfaceAlphaMod"));
	SDL::SetSurfaceBlendMode = reinterpret_cast<PF_SDL_SetSurfaceBlendMode>(dlsym(SDL_LIBRARY,"SDL_SetSurfaceBlendMode"));
	SDL::SetSurfaceColorMod = reinterpret_cast<PF_SDL_SetSurfaceColorMod>(dlsym(SDL_LIBRARY,"SDL_SetSurfaceColorMod"));
	SDL::SetSurfacePalette = reinterpret_cast<PF_SDL_SetSurfacePalette>(dlsym(SDL_LIBRARY,"SDL_SetSurfacePalette"));
	SDL::SetSurfaceRLE = reinterpret_cast<PF_SDL_SetSurfaceRLE>(dlsym(SDL_LIBRARY,"SDL_SetSurfaceRLE"));
	SDL::SetTextInputRect = reinterpret_cast<PF_SDL_SetTextInputRect>(dlsym(SDL_LIBRARY,"SDL_SetTextInputRect"));
	SDL::SetTextureAlphaMod = reinterpret_cast<PF_SDL_SetTextureAlphaMod>(dlsym(SDL_LIBRARY,"SDL_SetTextureAlphaMod"));
	SDL::SetTextureBlendMode = reinterpret_cast<PF_SDL_SetTextureBlendMode>(dlsym(SDL_LIBRARY,"SDL_SetTextureBlendMode"));
	SDL::SetTextureColorMod = reinterpret_cast<PF_SDL_SetTextureColorMod>(dlsym(SDL_LIBRARY,"SDL_SetTextureColorMod"));
	SDL::SetThreadPriority = reinterpret_cast<PF_SDL_SetThreadPriority>(dlsym(SDL_LIBRARY,"SDL_SetThreadPriority"));
	SDL::SetWindowBordered = reinterpret_cast<PF_SDL_SetWindowBordered>(dlsym(SDL_LIBRARY,"SDL_SetWindowBordered"));
	SDL::SetWindowBrightness = reinterpret_cast<PF_SDL_SetWindowBrightness>(dlsym(SDL_LIBRARY,"SDL_SetWindowBrightness"));
	SDL::SetWindowData = reinterpret_cast<PF_SDL_SetWindowData>(dlsym(SDL_LIBRARY,"SDL_SetWindowData"));
	SDL::SetWindowDisplayMode = reinterpret_cast<PF_SDL_SetWindowDisplayMode>(dlsym(SDL_LIBRARY,"SDL_SetWindowDisplayMode"));
	SDL::SetWindowFullscreen = reinterpret_cast<PF_SDL_SetWindowFullscreen>(dlsym(SDL_LIBRARY,"SDL_SetWindowFullscreen"));
	SDL::SetWindowGammaRamp = reinterpret_cast<PF_SDL_SetWindowGammaRamp>(dlsym(SDL_LIBRARY,"SDL_SetWindowGammaRamp"));
	SDL::SetWindowGrab = reinterpret_cast<PF_SDL_SetWindowGrab>(dlsym(SDL_LIBRARY,"SDL_SetWindowGrab"));
	SDL::SetWindowHitTest = reinterpret_cast<PF_SDL_SetWindowHitTest>(dlsym(SDL_LIBRARY,"SDL_SetWindowHitTest"));
	SDL::SetWindowIcon = reinterpret_cast<PF_SDL_SetWindowIcon>(dlsym(SDL_LIBRARY,"SDL_SetWindowIcon"));
	SDL::SetWindowMaximumSize = reinterpret_cast<PF_SDL_SetWindowMaximumSize>(dlsym(SDL_LIBRARY,"SDL_SetWindowMaximumSize"));
	SDL::SetWindowMinimumSize = reinterpret_cast<PF_SDL_SetWindowMinimumSize>(dlsym(SDL_LIBRARY,"SDL_SetWindowMinimumSize"));
	SDL::SetWindowPosition = reinterpret_cast<PF_SDL_SetWindowPosition>(dlsym(SDL_LIBRARY,"SDL_SetWindowPosition"));
	//pSDL_SetWindowShape = reinterpret_cast<PF_SDL_SetWindowShape>(dlsym(SDL_LIBRARY,"SDL_SetWindowShape"));
	SDL::SetWindowSize = reinterpret_cast<PF_SDL_SetWindowSize>(dlsym(SDL_LIBRARY,"SDL_SetWindowSize"));
	SDL::SetWindowTitle = reinterpret_cast<PF_SDL_SetWindowTitle>(dlsym(SDL_LIBRARY,"SDL_SetWindowTitle"));
	//pSDL_SetWindowsMessageHook = reinterpret_cast<PF_SDL_SetWindowsMessageHook>(dlsym(SDL_LIBRARY,"SDL_SetWindowsMessageHook"));
	SDL::ShowCursor = reinterpret_cast<PF_SDL_ShowCursor>(dlsym(SDL_LIBRARY,"SDL_ShowCursor"));
	SDL::ShowMessageBox = reinterpret_cast<PF_SDL_ShowMessageBox>(dlsym(SDL_LIBRARY,"SDL_ShowMessageBox"));
	SDL::ShowSimpleMessageBox = reinterpret_cast<PF_SDL_ShowSimpleMessageBox>(dlsym(SDL_LIBRARY,"SDL_ShowSimpleMessageBox"));
	SDL::ShowWindow = reinterpret_cast<PF_SDL_ShowWindow>(dlsym(SDL_LIBRARY,"SDL_ShowWindow"));
	SDL::SoftStretch = reinterpret_cast<PF_SDL_SoftStretch>(dlsym(SDL_LIBRARY,"SDL_SoftStretch"));
	SDL::StartTextInput = reinterpret_cast<PF_SDL_StartTextInput>(dlsym(SDL_LIBRARY,"SDL_StartTextInput"));
	SDL::StopTextInput = reinterpret_cast<PF_SDL_StopTextInput>(dlsym(SDL_LIBRARY,"SDL_StopTextInput"));
	/*pSDL_Swap16 = reinterpret_cast<PF_SDL_Swap16>(dlsym(SDL_LIBRARY,"SDL_Swap16"));
	SDL::Swap32 = reinterpret_cast<PF_SDL_Swap32>(dlsym(SDL_LIBRARY,"SDL_Swap32"));
	SDL::Swap32 = reinterpret_cast<PF_SDL_Swap32>(dlsym(SDL_LIBRARY,"SDL_Swap32"));
	SDL::Swap32 = reinterpret_cast<PF_SDL_Swap32>(dlsym(SDL_LIBRARY,"SDL_Swap32"));
	SDL::Swap32 = reinterpret_cast<PF_SDL_Swap32>(dlsym(SDL_LIBRARY,"SDL_Swap32"));
	SDL::Swap32 = reinterpret_cast<PF_SDL_Swap32>(dlsym(SDL_LIBRARY,"SDL_Swap32"));
	SDL::Swap64 = reinterpret_cast<PF_SDL_Swap64>(dlsym(SDL_LIBRARY,"SDL_Swap64"));
	SDL::Swap64 = reinterpret_cast<PF_SDL_Swap64>(dlsym(SDL_LIBRARY,"SDL_Swap64"));
	SDL::Swap64 = reinterpret_cast<PF_SDL_Swap64>(dlsym(SDL_LIBRARY,"SDL_Swap64"));*/
	SDL::SwapFloat = reinterpret_cast<PF_SDL_SwapFloat>(dlsym(SDL_LIBRARY,"SDL_SwapFloat"));
	SDL::TLSCreate = reinterpret_cast<PF_SDL_TLSCreate>(dlsym(SDL_LIBRARY,"SDL_TLSCreate"));
	SDL::TLSGet = reinterpret_cast<PF_SDL_TLSGet>(dlsym(SDL_LIBRARY,"SDL_TLSGet"));
	SDL::TLSSet = reinterpret_cast<PF_SDL_TLSSet>(dlsym(SDL_LIBRARY,"SDL_TLSSet"));
	SDL::ThreadID = reinterpret_cast<PF_SDL_ThreadID>(dlsym(SDL_LIBRARY,"SDL_ThreadID"));
	SDL::TryLockMutex = reinterpret_cast<PF_SDL_TryLockMutex>(dlsym(SDL_LIBRARY,"SDL_TryLockMutex"));
	SDL::UnionRect = reinterpret_cast<PF_SDL_UnionRect>(dlsym(SDL_LIBRARY,"SDL_UnionRect"));
	SDL::UnloadObject = reinterpret_cast<PF_SDL_UnloadObject>(dlsym(SDL_LIBRARY,"SDL_UnloadObject"));
	SDL::UnlockAudio = reinterpret_cast<PF_SDL_UnlockAudio>(dlsym(SDL_LIBRARY,"SDL_UnlockAudio"));
	SDL::UnlockAudioDevice = reinterpret_cast<PF_SDL_UnlockAudioDevice>(dlsym(SDL_LIBRARY,"SDL_UnlockAudioDevice"));
	SDL::UnlockMutex = reinterpret_cast<PF_SDL_UnlockMutex>(dlsym(SDL_LIBRARY,"SDL_UnlockMutex"));
	SDL::UnlockSurface = reinterpret_cast<PF_SDL_UnlockSurface>(dlsym(SDL_LIBRARY,"SDL_UnlockSurface"));
	SDL::UnlockTexture = reinterpret_cast<PF_SDL_UnlockTexture>(dlsym(SDL_LIBRARY,"SDL_UnlockTexture"));
	//pSDL_UnregisterApp = reinterpret_cast<PF_SDL_UnregisterApp>(dlsym(SDL_LIBRARY,"SDL_UnregisterApp"));
	SDL::UpdateTexture = reinterpret_cast<PF_SDL_UpdateTexture>(dlsym(SDL_LIBRARY,"SDL_UpdateTexture"));
	SDL::UpdateWindowSurface = reinterpret_cast<PF_SDL_UpdateWindowSurface>(dlsym(SDL_LIBRARY,"SDL_UpdateWindowSurface"));
	SDL::UpdateWindowSurfaceRects = reinterpret_cast<PF_SDL_UpdateWindowSurfaceRects>(dlsym(SDL_LIBRARY,"SDL_UpdateWindowSurfaceRects"));
	SDL::UpdateYUVTexture = reinterpret_cast<PF_SDL_UpdateYUVTexture>(dlsym(SDL_LIBRARY,"SDL_UpdateYUVTexture"));
	SDL::UpperBlit = reinterpret_cast<PF_SDL_UpperBlit>(dlsym(SDL_LIBRARY,"SDL_UpperBlit"));
	SDL::UpperBlitScaled = reinterpret_cast<PF_SDL_UpperBlitScaled>(dlsym(SDL_LIBRARY,"SDL_UpperBlitScaled"));
	SDL::VideoInit = reinterpret_cast<PF_SDL_VideoInit>(dlsym(SDL_LIBRARY,"SDL_VideoInit"));
	SDL::VideoQuit = reinterpret_cast<PF_SDL_VideoQuit>(dlsym(SDL_LIBRARY,"SDL_VideoQuit"));
	SDL::WaitEvent = reinterpret_cast<PF_SDL_WaitEvent>(dlsym(SDL_LIBRARY,"SDL_WaitEvent"));
	SDL::WaitEventTimeout = reinterpret_cast<PF_SDL_WaitEventTimeout>(dlsym(SDL_LIBRARY,"SDL_WaitEventTimeout"));
	SDL::WaitThread = reinterpret_cast<PF_SDL_WaitThread>(dlsym(SDL_LIBRARY,"SDL_WaitThread"));
	SDL::WarpMouseGlobal = reinterpret_cast<PF_SDL_WarpMouseGlobal>(dlsym(SDL_LIBRARY,"SDL_WarpMouseGlobal"));
	SDL::WarpMouseInWindow = reinterpret_cast<PF_SDL_WarpMouseInWindow>(dlsym(SDL_LIBRARY,"SDL_WarpMouseInWindow"));
	SDL::WasInit = reinterpret_cast<PF_SDL_WasInit>(dlsym(SDL_LIBRARY,"SDL_WasInit"));
	//pSDL_WinRTGetFSPathUNICODE = reinterpret_cast<PF_SDL_WinRTGetFSPathUNICODE>(dlsym(SDL_LIBRARY,"SDL_WinRTGetFSPathUNICODE"));
	//pSDL_WinRTGetFSPathUTF8 = reinterpret_cast<PF_SDL_WinRTGetFSPathUTF8>(dlsym(SDL_LIBRARY,"SDL_WinRTGetFSPathUTF8"));
	//pSDL_WinRTRunApp = reinterpret_cast<PF_SDL_WinRTRunApp>(dlsym(SDL_LIBRARY,"SDL_WinRTRunApp"));
	SDL::WriteBE16 = reinterpret_cast<PF_SDL_WriteBE16>(dlsym(SDL_LIBRARY,"SDL_WriteBE16"));
	SDL::WriteBE32 = reinterpret_cast<PF_SDL_WriteBE32>(dlsym(SDL_LIBRARY,"SDL_WriteBE32"));
	SDL::WriteBE64 = reinterpret_cast<PF_SDL_WriteBE64>(dlsym(SDL_LIBRARY,"SDL_WriteBE64"));
	SDL::WriteLE16 = reinterpret_cast<PF_SDL_WriteLE16>(dlsym(SDL_LIBRARY,"SDL_WriteLE16"));
	SDL::WriteLE32 = reinterpret_cast<PF_SDL_WriteLE32>(dlsym(SDL_LIBRARY,"SDL_WriteLE32"));
	SDL::WriteLE64 = reinterpret_cast<PF_SDL_WriteLE64>(dlsym(SDL_LIBRARY,"SDL_WriteLE64"));
	SDL::WriteU8 = reinterpret_cast<PF_SDL_WriteU8>(dlsym(SDL_LIBRARY,"SDL_WriteU8"));
	SDL::abs = reinterpret_cast<PF_SDL_abs>(dlsym(SDL_LIBRARY,"SDL_abs"));
	SDL::acos = reinterpret_cast<PF_SDL_acos>(dlsym(SDL_LIBRARY,"SDL_acos"));
	SDL::asin = reinterpret_cast<PF_SDL_asin>(dlsym(SDL_LIBRARY,"SDL_asin"));
	SDL::atan = reinterpret_cast<PF_SDL_atan>(dlsym(SDL_LIBRARY,"SDL_atan"));
	SDL::atan2 = reinterpret_cast<PF_SDL_atan2>(dlsym(SDL_LIBRARY,"SDL_atan2"));
	SDL::atof = reinterpret_cast<PF_SDL_atof>(dlsym(SDL_LIBRARY,"SDL_atof"));
	SDL::atoi = reinterpret_cast<PF_SDL_atoi>(dlsym(SDL_LIBRARY,"SDL_atoi"));
	SDL::calloc = reinterpret_cast<PF_SDL_calloc>(dlsym(SDL_LIBRARY,"SDL_calloc"));
	SDL::ceil = reinterpret_cast<PF_SDL_ceil>(dlsym(SDL_LIBRARY,"SDL_ceil"));
	SDL::copysign = reinterpret_cast<PF_SDL_copysign>(dlsym(SDL_LIBRARY,"SDL_copysign"));
	SDL::cos = reinterpret_cast<PF_SDL_cos>(dlsym(SDL_LIBRARY,"SDL_cos"));
	SDL::cosf = reinterpret_cast<PF_SDL_cosf>(dlsym(SDL_LIBRARY,"SDL_cosf"));
	SDL::fabs = reinterpret_cast<PF_SDL_fabs>(dlsym(SDL_LIBRARY,"SDL_fabs"));
	SDL::floor = reinterpret_cast<PF_SDL_floor>(dlsym(SDL_LIBRARY,"SDL_floor"));
	SDL::free = reinterpret_cast<PF_SDL_free>(dlsym(SDL_LIBRARY,"SDL_free"));
	SDL::getenv = reinterpret_cast<PF_SDL_getenv>(dlsym(SDL_LIBRARY,"SDL_getenv"));
	//pSDL_iPhoneSetAnimationCallback = reinterpret_cast<PF_SDL_iPhoneSetAnimationCallback>(dlsym(SDL_LIBRARY,"SDL_iPhoneSetAnimationCallback"));
	//pSDL_iPhoneSetEventPump = reinterpret_cast<PF_SDL_iPhoneSetEventPump>(dlsym(SDL_LIBRARY,"SDL_iPhoneSetEventPump"));
	SDL::iconv = reinterpret_cast<PF_SDL_iconv>(dlsym(SDL_LIBRARY,"SDL_iconv"));
	SDL::iconv_close = reinterpret_cast<PF_SDL_iconv_close>(dlsym(SDL_LIBRARY,"SDL_iconv_close"));
	SDL::iconv_open = reinterpret_cast<PF_SDL_iconv_open>(dlsym(SDL_LIBRARY,"SDL_iconv_open"));
	SDL::iconv_string = reinterpret_cast<PF_SDL_iconv_string>(dlsym(SDL_LIBRARY,"SDL_iconv_string"));
	SDL::isdigit = reinterpret_cast<PF_SDL_isdigit>(dlsym(SDL_LIBRARY,"SDL_isdigit"));
	SDL::isspace = reinterpret_cast<PF_SDL_isspace>(dlsym(SDL_LIBRARY,"SDL_isspace"));
	SDL::itoa = reinterpret_cast<PF_SDL_itoa>(dlsym(SDL_LIBRARY,"SDL_itoa"));
	SDL::lltoa = reinterpret_cast<PF_SDL_lltoa>(dlsym(SDL_LIBRARY,"SDL_lltoa"));
	SDL::log = reinterpret_cast<PF_SDL_log>(dlsym(SDL_LIBRARY,"SDL_log"));
	SDL::ltoa = reinterpret_cast<PF_SDL_ltoa>(dlsym(SDL_LIBRARY,"SDL_ltoa"));
	SDL::main = reinterpret_cast<PF_SDL_main>(dlsym(SDL_LIBRARY,"SDL_main"));
	SDL::malloc = reinterpret_cast<PF_SDL_malloc>(dlsym(SDL_LIBRARY,"SDL_malloc"));
	SDL::memcmp = reinterpret_cast<PF_SDL_memcmp>(dlsym(SDL_LIBRARY,"SDL_memcmp"));
	SDL::memcpy = reinterpret_cast<PF_SDL_memcpy>(dlsym(SDL_LIBRARY,"SDL_memcpy"));
	SDL::memmove = reinterpret_cast<PF_SDL_memmove>(dlsym(SDL_LIBRARY,"SDL_memmove"));
	SDL::memset = reinterpret_cast<PF_SDL_memset>(dlsym(SDL_LIBRARY,"SDL_memset"));
	SDL::memset4 = reinterpret_cast<PF_SDL_memset4>(dlsym(SDL_LIBRARY,"SDL_memset4"));
	SDL::pow = reinterpret_cast<PF_SDL_pow>(dlsym(SDL_LIBRARY,"SDL_pow"));
	SDL::qsort = reinterpret_cast<PF_SDL_qsort>(dlsym(SDL_LIBRARY,"SDL_qsort"));
	SDL::realloc = reinterpret_cast<PF_SDL_realloc>(dlsym(SDL_LIBRARY,"SDL_realloc"));
	SDL::scalbn = reinterpret_cast<PF_SDL_scalbn>(dlsym(SDL_LIBRARY,"SDL_scalbn"));
	SDL::setenv = reinterpret_cast<PF_SDL_setenv>(dlsym(SDL_LIBRARY,"SDL_setenv"));
	SDL::sin = reinterpret_cast<PF_SDL_sin>(dlsym(SDL_LIBRARY,"SDL_sin"));
	SDL::sinf = reinterpret_cast<PF_SDL_sinf>(dlsym(SDL_LIBRARY,"SDL_sinf"));
	SDL::snprintf = reinterpret_cast<PF_SDL_snprintf>(dlsym(SDL_LIBRARY,"SDL_snprintf"));
	SDL::sqrt = reinterpret_cast<PF_SDL_sqrt>(dlsym(SDL_LIBRARY,"SDL_sqrt"));
	SDL::sqrtf = reinterpret_cast<PF_SDL_sqrtf>(dlsym(SDL_LIBRARY,"SDL_sqrtf"));
	SDL::sscanf = reinterpret_cast<PF_SDL_sscanf>(dlsym(SDL_LIBRARY,"SDL_sscanf"));
	SDL::strcasecmp = reinterpret_cast<PF_SDL_strcasecmp>(dlsym(SDL_LIBRARY,"SDL_strcasecmp"));
	SDL::strchr = reinterpret_cast<PF_SDL_strchr>(dlsym(SDL_LIBRARY,"SDL_strchr"));
	SDL::strcmp = reinterpret_cast<PF_SDL_strcmp>(dlsym(SDL_LIBRARY,"SDL_strcmp"));
	SDL::strdup = reinterpret_cast<PF_SDL_strdup>(dlsym(SDL_LIBRARY,"SDL_strdup"));
	SDL::strlcat = reinterpret_cast<PF_SDL_strlcat>(dlsym(SDL_LIBRARY,"SDL_strlcat"));
	SDL::strlcpy = reinterpret_cast<PF_SDL_strlcpy>(dlsym(SDL_LIBRARY,"SDL_strlcpy"));
	SDL::strlen = reinterpret_cast<PF_SDL_strlen>(dlsym(SDL_LIBRARY,"SDL_strlen"));
	SDL::strlwr = reinterpret_cast<PF_SDL_strlwr>(dlsym(SDL_LIBRARY,"SDL_strlwr"));
	SDL::strncasecmp = reinterpret_cast<PF_SDL_strncasecmp>(dlsym(SDL_LIBRARY,"SDL_strncasecmp"));
	SDL::strncmp = reinterpret_cast<PF_SDL_strncmp>(dlsym(SDL_LIBRARY,"SDL_strncmp"));
	SDL::strrchr = reinterpret_cast<PF_SDL_strrchr>(dlsym(SDL_LIBRARY,"SDL_strrchr"));
	SDL::strrev = reinterpret_cast<PF_SDL_strrev>(dlsym(SDL_LIBRARY,"SDL_strrev"));
	SDL::strstr = reinterpret_cast<PF_SDL_strstr>(dlsym(SDL_LIBRARY,"SDL_strstr"));
	SDL::strtod = reinterpret_cast<PF_SDL_strtod>(dlsym(SDL_LIBRARY,"SDL_strtod"));
	SDL::strtol = reinterpret_cast<PF_SDL_strtol>(dlsym(SDL_LIBRARY,"SDL_strtol"));
	SDL::strtoll = reinterpret_cast<PF_SDL_strtoll>(dlsym(SDL_LIBRARY,"SDL_strtoll"));
	SDL::strtoul = reinterpret_cast<PF_SDL_strtoul>(dlsym(SDL_LIBRARY,"SDL_strtoul"));
	SDL::strtoull = reinterpret_cast<PF_SDL_strtoull>(dlsym(SDL_LIBRARY,"SDL_strtoull"));
	SDL::strupr = reinterpret_cast<PF_SDL_strupr>(dlsym(SDL_LIBRARY,"SDL_strupr"));
	SDL::tan = reinterpret_cast<PF_SDL_tan>(dlsym(SDL_LIBRARY,"SDL_tan"));
	SDL::tanf = reinterpret_cast<PF_SDL_tanf>(dlsym(SDL_LIBRARY,"SDL_tanf"));
	SDL::tolower = reinterpret_cast<PF_SDL_tolower>(dlsym(SDL_LIBRARY,"SDL_tolower"));
	SDL::toupper = reinterpret_cast<PF_SDL_toupper>(dlsym(SDL_LIBRARY,"SDL_toupper"));
	SDL::uitoa = reinterpret_cast<PF_SDL_uitoa>(dlsym(SDL_LIBRARY,"SDL_uitoa"));
	SDL::ulltoa = reinterpret_cast<PF_SDL_ulltoa>(dlsym(SDL_LIBRARY,"SDL_ulltoa"));
	SDL::ultoa = reinterpret_cast<PF_SDL_ultoa>(dlsym(SDL_LIBRARY,"SDL_ultoa"));
	SDL::utf8strlcpy = reinterpret_cast<PF_SDL_utf8strlcpy>(dlsym(SDL_LIBRARY,"SDL_utf8strlcpy"));
	SDL::vsnprintf = reinterpret_cast<PF_SDL_vsnprintf>(dlsym(SDL_LIBRARY,"SDL_vsnprintf"));
	SDL::vsscanf = reinterpret_cast<PF_SDL_vsscanf>(dlsym(SDL_LIBRARY,"SDL_vsscanf"));
	SDL::wcslcat = reinterpret_cast<PF_SDL_wcslcat>(dlsym(SDL_LIBRARY,"SDL_wcslcat"));
	SDL::wcslcpy = reinterpret_cast<PF_SDL_wcslcpy>(dlsym(SDL_LIBRARY,"SDL_wcslcpy"));
	SDL::wcslen = reinterpret_cast<PF_SDL_wcslen>(dlsym(SDL_LIBRARY,"SDL_wcslen"));
}

PF_SDL_AddEventWatch SDL::AddEventWatch;
PF_SDL_AddHintCallback SDL::AddHintCallback;
PF_SDL_AddTimer SDL::AddTimer;
PF_SDL_AllocFormat SDL::AllocFormat;
PF_SDL_AllocPalette SDL::AllocPalette;
PF_SDL_AllocRW SDL::AllocRW;
/* PF_SDL_AndroidGetActivity SDL::AndroidGetActivity;
PF_SDL_AndroidGetExternalStoragePath SDL::AndroidGetExternalStoragePath;
PF_SDL_AndroidGetExternalStorageState SDL::AndroidGetExternalStorageState;
PF_SDL_AndroidGetInternalStoragePath SDL::AndroidGetInternalStoragePath;
PF_SDL_AndroidGetJNIEnv SDL::AndroidGetJNIEnv;*/
PF_SDL_AtomicAdd SDL::AtomicAdd;
PF_SDL_AtomicCAS SDL::AtomicCAS;
PF_SDL_AtomicCASPtr SDL::AtomicCASPtr;
PF_SDL_AtomicGet SDL::AtomicGet;
PF_SDL_AtomicGetPtr SDL::AtomicGetPtr;
PF_SDL_AtomicLock SDL::AtomicLock;
PF_SDL_AtomicSet SDL::AtomicSet;
PF_SDL_AtomicSetPtr SDL::AtomicSetPtr;
PF_SDL_AtomicTryLock SDL::AtomicTryLock;
PF_SDL_AtomicUnlock SDL::AtomicUnlock;
PF_SDL_AudioInit SDL::AudioInit;
PF_SDL_AudioQuit SDL::AudioQuit;
PF_SDL_BuildAudioCVT SDL::BuildAudioCVT;
PF_SDL_CalculateGammaRamp SDL::CalculateGammaRamp;
PF_SDL_CaptureMouse SDL::CaptureMouse;
PF_SDL_ClearError SDL::ClearError;
PF_SDL_ClearHints SDL::ClearHints;
PF_SDL_ClearQueuedAudio SDL::ClearQueuedAudio;
PF_SDL_CloseAudio SDL::CloseAudio;
PF_SDL_CloseAudioDevice SDL::CloseAudioDevice;
PF_SDL_CondBroadcast SDL::CondBroadcast;
PF_SDL_CondSignal SDL::CondSignal;
PF_SDL_CondWait SDL::CondWait;
PF_SDL_CondWaitTimeout SDL::CondWaitTimeout;
PF_SDL_ConvertAudio SDL::ConvertAudio;
PF_SDL_ConvertPixels SDL::ConvertPixels;
PF_SDL_ConvertSurface SDL::ConvertSurface;
PF_SDL_ConvertSurfaceFormat SDL::ConvertSurfaceFormat;
PF_SDL_CreateColorCursor SDL::CreateColorCursor;
PF_SDL_CreateCond SDL::CreateCond;
PF_SDL_CreateCursor SDL::CreateCursor;
PF_SDL_CreateMutex SDL::CreateMutex;
PF_SDL_CreateRGBSurface SDL::CreateRGBSurface;
PF_SDL_CreateRGBSurfaceFrom SDL::CreateRGBSurfaceFrom;
PF_SDL_CreateRenderer SDL::CreateRenderer;
PF_SDL_CreateSemaphore SDL::CreateSemaphore;
// PF_SDL_CreateShapedWindow SDL::CreateShapedWindow;
PF_SDL_CreateSoftwareRenderer SDL::CreateSoftwareRenderer;
PF_SDL_CreateSystemCursor SDL::CreateSystemCursor;
PF_SDL_CreateTexture SDL::CreateTexture;
PF_SDL_CreateTextureFromSurface SDL::CreateTextureFromSurface;
PF_SDL_CreateThread SDL::CreateThread;
//PF_SDL_CreateThread SDL::CreateThread;
PF_SDL_CreateWindow SDL::CreateWindow;
PF_SDL_CreateWindowAndRenderer SDL::CreateWindowAndRenderer;
PF_SDL_CreateWindowFrom SDL::CreateWindowFrom;
// PF_SDL_DXGIGetOutputInfo SDL::DXGIGetOutputInfo;
PF_SDL_DelEventWatch SDL::DelEventWatch;
PF_SDL_DelHintCallback SDL::DelHintCallback;
PF_SDL_Delay SDL::Delay;
PF_SDL_DestroyCond SDL::DestroyCond;
PF_SDL_DestroyMutex SDL::DestroyMutex;
PF_SDL_DestroyRenderer SDL::DestroyRenderer;
PF_SDL_DestroySemaphore SDL::DestroySemaphore;
PF_SDL_DestroyTexture SDL::DestroyTexture;
PF_SDL_DestroyWindow SDL::DestroyWindow;
PF_SDL_DetachThread SDL::DetachThread;
// PF_SDL_Direct3D9GetAdapterIndex SDL::Direct3D9GetAdapterIndex;
PF_SDL_DisableScreenSaver SDL::DisableScreenSaver;
PF_SDL_EnableScreenSaver SDL::EnableScreenSaver;
PF_SDL_EnclosePoints SDL::EnclosePoints;
PF_SDL_Error SDL::Error;
PF_SDL_EventState SDL::EventState;
PF_SDL_FillRect SDL::FillRect;
PF_SDL_FillRects SDL::FillRects;
PF_SDL_FilterEvents SDL::FilterEvents;
PF_SDL_FlushEvent SDL::FlushEvent;
PF_SDL_FlushEvents SDL::FlushEvents;
PF_SDL_FreeCursor SDL::FreeCursor;
PF_SDL_FreeFormat SDL::FreeFormat;
PF_SDL_FreePalette SDL::FreePalette;
PF_SDL_FreeRW SDL::FreeRW;
PF_SDL_FreeSurface SDL::FreeSurface;
PF_SDL_FreeWAV SDL::FreeWAV;
PF_SDL_GL_BindTexture SDL::GL_BindTexture;
PF_SDL_GL_CreateContext SDL::GL_CreateContext;
PF_SDL_GL_DeleteContext SDL::GL_DeleteContext;
PF_SDL_GL_ExtensionSupported SDL::GL_ExtensionSupported;
PF_SDL_GL_GetAttribute SDL::GL_GetAttribute;
PF_SDL_GL_GetCurrentContext SDL::GL_GetCurrentContext;
PF_SDL_GL_GetCurrentWindow SDL::GL_GetCurrentWindow;
PF_SDL_GL_GetDrawableSize SDL::GL_GetDrawableSize;
PF_SDL_GL_GetProcAddress SDL::GL_GetProcAddress;
PF_SDL_GL_GetSwapInterval SDL::GL_GetSwapInterval;
PF_SDL_GL_LoadLibrary SDL::GL_LoadLibrary;
PF_SDL_GL_MakeCurrent SDL::GL_MakeCurrent;
PF_SDL_GL_ResetAttributes SDL::GL_ResetAttributes;
PF_SDL_GL_SetAttribute SDL::GL_SetAttribute;
PF_SDL_GL_SetSwapInterval SDL::GL_SetSwapInterval;
PF_SDL_GL_SwapWindow SDL::GL_SwapWindow;
PF_SDL_GL_UnbindTexture SDL::GL_UnbindTexture;
PF_SDL_GL_UnloadLibrary SDL::GL_UnloadLibrary;
PF_SDL_GameControllerAddMapping SDL::GameControllerAddMapping;
PF_SDL_GameControllerAddMappingsFromRW SDL::GameControllerAddMappingsFromRW;
PF_SDL_GameControllerClose SDL::GameControllerClose;
PF_SDL_GameControllerEventState SDL::GameControllerEventState;
PF_SDL_GameControllerFromInstanceID SDL::GameControllerFromInstanceID;
PF_SDL_GameControllerGetAttached SDL::GameControllerGetAttached;
PF_SDL_GameControllerGetAxis SDL::GameControllerGetAxis;
PF_SDL_GameControllerGetAxisFromString SDL::GameControllerGetAxisFromString;
PF_SDL_GameControllerGetBindForAxis SDL::GameControllerGetBindForAxis;
PF_SDL_GameControllerGetBindForButton SDL::GameControllerGetBindForButton;
PF_SDL_GameControllerGetButton SDL::GameControllerGetButton;
PF_SDL_GameControllerGetButtonFromString SDL::GameControllerGetButtonFromString;
PF_SDL_GameControllerGetJoystick SDL::GameControllerGetJoystick;
PF_SDL_GameControllerGetStringForAxis SDL::GameControllerGetStringForAxis;
PF_SDL_GameControllerGetStringForButton SDL::GameControllerGetStringForButton;
PF_SDL_GameControllerMapping SDL::GameControllerMapping;
PF_SDL_GameControllerMappingForGUID SDL::GameControllerMappingForGUID;
PF_SDL_GameControllerName SDL::GameControllerName;
PF_SDL_GameControllerNameForIndex SDL::GameControllerNameForIndex;
PF_SDL_GameControllerOpen SDL::GameControllerOpen;
PF_SDL_GameControllerUpdate SDL::GameControllerUpdate;
PF_SDL_GetAssertionHandler SDL::GetAssertionHandler;
PF_SDL_GetAssertionReport SDL::GetAssertionReport;
PF_SDL_GetAudioDeviceName SDL::GetAudioDeviceName;
PF_SDL_GetAudioDeviceStatus SDL::GetAudioDeviceStatus;
PF_SDL_GetAudioDriver SDL::GetAudioDriver;
PF_SDL_GetAudioStatus SDL::GetAudioStatus;
PF_SDL_GetBasePath SDL::GetBasePath;
PF_SDL_GetCPUCacheLineSize SDL::GetCPUCacheLineSize;
PF_SDL_GetCPUCount SDL::GetCPUCount;
PF_SDL_GetClipRect SDL::GetClipRect;
PF_SDL_GetClipboardText SDL::GetClipboardText;
PF_SDL_GetClosestDisplayMode SDL::GetClosestDisplayMode;
PF_SDL_GetColorKey SDL::GetColorKey;
PF_SDL_GetCurrentAudioDriver SDL::GetCurrentAudioDriver;
PF_SDL_GetCurrentDisplayMode SDL::GetCurrentDisplayMode;
PF_SDL_GetCurrentVideoDriver SDL::GetCurrentVideoDriver;
PF_SDL_GetCursor SDL::GetCursor;
PF_SDL_GetDefaultAssertionHandler SDL::GetDefaultAssertionHandler;
PF_SDL_GetDefaultCursor SDL::GetDefaultCursor;
PF_SDL_GetDesktopDisplayMode SDL::GetDesktopDisplayMode;
PF_SDL_GetDisplayBounds SDL::GetDisplayBounds;
PF_SDL_GetDisplayDPI SDL::GetDisplayDPI;
PF_SDL_GetDisplayMode SDL::GetDisplayMode;
PF_SDL_GetDisplayName SDL::GetDisplayName;
PF_SDL_GetError SDL::GetError;
PF_SDL_GetEventFilter SDL::GetEventFilter;
PF_SDL_GetGlobalMouseState SDL::GetGlobalMouseState;
PF_SDL_GetGrabbedWindow SDL::GetGrabbedWindow;
PF_SDL_GetHint SDL::GetHint;
PF_SDL_GetKeyFromName SDL::GetKeyFromName;
PF_SDL_GetKeyFromScancode SDL::GetKeyFromScancode;
PF_SDL_GetKeyName SDL::GetKeyName;
PF_SDL_GetKeyboardFocus SDL::GetKeyboardFocus;
PF_SDL_GetKeyboardState SDL::GetKeyboardState;
PF_SDL_GetModState SDL::GetModState;
PF_SDL_GetMouseFocus SDL::GetMouseFocus;
PF_SDL_GetMouseState SDL::GetMouseState;
PF_SDL_GetNumAudioDevices SDL::GetNumAudioDevices;
PF_SDL_GetNumAudioDrivers SDL::GetNumAudioDrivers;
PF_SDL_GetNumDisplayModes SDL::GetNumDisplayModes;
PF_SDL_GetNumRenderDrivers SDL::GetNumRenderDrivers;
PF_SDL_GetNumTouchDevices SDL::GetNumTouchDevices;
PF_SDL_GetNumTouchFingers SDL::GetNumTouchFingers;
PF_SDL_GetNumVideoDisplays SDL::GetNumVideoDisplays;
PF_SDL_GetNumVideoDrivers SDL::GetNumVideoDrivers;
PF_SDL_GetPerformanceCounter SDL::GetPerformanceCounter;
PF_SDL_GetPerformanceFrequency SDL::GetPerformanceFrequency;
PF_SDL_GetPixelFormatName SDL::GetPixelFormatName;
PF_SDL_GetPlatform SDL::GetPlatform;
PF_SDL_GetPowerInfo SDL::GetPowerInfo;
PF_SDL_GetPrefPath SDL::GetPrefPath;
PF_SDL_GetQueuedAudioSize SDL::GetQueuedAudioSize;
PF_SDL_GetRGB SDL::GetRGB;
PF_SDL_GetRGBA SDL::GetRGBA;
PF_SDL_GetRelativeMouseMode SDL::GetRelativeMouseMode;
PF_SDL_GetRelativeMouseState SDL::GetRelativeMouseState;
PF_SDL_GetRenderDrawBlendMode SDL::GetRenderDrawBlendMode;
PF_SDL_GetRenderDrawColor SDL::GetRenderDrawColor;
PF_SDL_GetRenderDriverInfo SDL::GetRenderDriverInfo;
PF_SDL_GetRenderTarget SDL::GetRenderTarget;
PF_SDL_GetRenderer SDL::GetRenderer;
PF_SDL_GetRendererInfo SDL::GetRendererInfo;
PF_SDL_GetRendererOutputSize SDL::GetRendererOutputSize;
PF_SDL_GetRevision SDL::GetRevision;
PF_SDL_GetRevisionNumber SDL::GetRevisionNumber;
PF_SDL_GetScancodeFromKey SDL::GetScancodeFromKey;
PF_SDL_GetScancodeFromName SDL::GetScancodeFromName;
PF_SDL_GetScancodeName SDL::GetScancodeName;
// PF_SDL_GetShapedWindowMode SDL::GetShapedWindowMode;
PF_SDL_GetSurfaceAlphaMod SDL::GetSurfaceAlphaMod;
PF_SDL_GetSurfaceBlendMode SDL::GetSurfaceBlendMode;
PF_SDL_GetSurfaceColorMod SDL::GetSurfaceColorMod;
PF_SDL_GetSystemRAM SDL::GetSystemRAM;
PF_SDL_GetTextureAlphaMod SDL::GetTextureAlphaMod;
PF_SDL_GetTextureBlendMode SDL::GetTextureBlendMode;
PF_SDL_GetTextureColorMod SDL::GetTextureColorMod;
PF_SDL_GetThreadID SDL::GetThreadID;
PF_SDL_GetThreadName SDL::GetThreadName;
PF_SDL_GetTicks SDL::GetTicks;
PF_SDL_GetTouchDevice SDL::GetTouchDevice;
PF_SDL_GetTouchFinger SDL::GetTouchFinger;
PF_SDL_GetVersion SDL::GetVersion;
PF_SDL_GetVideoDriver SDL::GetVideoDriver;
PF_SDL_GetWindowBrightness SDL::GetWindowBrightness;
PF_SDL_GetWindowData SDL::GetWindowData;
PF_SDL_GetWindowDisplayIndex SDL::GetWindowDisplayIndex;
PF_SDL_GetWindowDisplayMode SDL::GetWindowDisplayMode;
PF_SDL_GetWindowFlags SDL::GetWindowFlags;
PF_SDL_GetWindowFromID SDL::GetWindowFromID;
PF_SDL_GetWindowGammaRamp SDL::GetWindowGammaRamp;
PF_SDL_GetWindowGrab SDL::GetWindowGrab;
PF_SDL_GetWindowID SDL::GetWindowID;
PF_SDL_GetWindowMaximumSize SDL::GetWindowMaximumSize;
PF_SDL_GetWindowMinimumSize SDL::GetWindowMinimumSize;
PF_SDL_GetWindowPixelFormat SDL::GetWindowPixelFormat;
PF_SDL_GetWindowPosition SDL::GetWindowPosition;
PF_SDL_GetWindowSize SDL::GetWindowSize;
PF_SDL_GetWindowSurface SDL::GetWindowSurface;
PF_SDL_GetWindowTitle SDL::GetWindowTitle;
// PF_SDL_GetWindowWMInfo SDL::GetWindowWMInfo;
PF_SDL_HapticClose SDL::HapticClose;
PF_SDL_HapticDestroyEffect SDL::HapticDestroyEffect;
PF_SDL_HapticEffectSupported SDL::HapticEffectSupported;
PF_SDL_HapticGetEffectStatus SDL::HapticGetEffectStatus;
PF_SDL_HapticIndex SDL::HapticIndex;
PF_SDL_HapticName SDL::HapticName;
PF_SDL_HapticNewEffect SDL::HapticNewEffect;
PF_SDL_HapticNumAxes SDL::HapticNumAxes;
PF_SDL_HapticNumEffects SDL::HapticNumEffects;
PF_SDL_HapticNumEffectsPlaying SDL::HapticNumEffectsPlaying;
PF_SDL_HapticOpen SDL::HapticOpen;
PF_SDL_HapticOpenFromJoystick SDL::HapticOpenFromJoystick;
PF_SDL_HapticOpenFromMouse SDL::HapticOpenFromMouse;
PF_SDL_HapticOpened SDL::HapticOpened;
PF_SDL_HapticPause SDL::HapticPause;
PF_SDL_HapticQuery SDL::HapticQuery;
PF_SDL_HapticRumbleInit SDL::HapticRumbleInit;
PF_SDL_HapticRumblePlay SDL::HapticRumblePlay;
PF_SDL_HapticRumbleStop SDL::HapticRumbleStop;
PF_SDL_HapticRumbleSupported SDL::HapticRumbleSupported;
PF_SDL_HapticRunEffect SDL::HapticRunEffect;
PF_SDL_HapticSetAutocenter SDL::HapticSetAutocenter;
PF_SDL_HapticSetGain SDL::HapticSetGain;
PF_SDL_HapticStopAll SDL::HapticStopAll;
PF_SDL_HapticStopEffect SDL::HapticStopEffect;
PF_SDL_HapticUnpause SDL::HapticUnpause;
PF_SDL_HapticUpdateEffect SDL::HapticUpdateEffect;
PF_SDL_Has3DNow SDL::Has3DNow;
PF_SDL_HasAVX SDL::HasAVX;
PF_SDL_HasAVX2 SDL::HasAVX2;
PF_SDL_HasAltiVec SDL::HasAltiVec;
PF_SDL_HasClipboardText SDL::HasClipboardText;
PF_SDL_HasEvent SDL::HasEvent;
PF_SDL_HasEvents SDL::HasEvents;
PF_SDL_HasIntersection SDL::HasIntersection;
PF_SDL_HasMMX SDL::HasMMX;
PF_SDL_HasRDTSC SDL::HasRDTSC;
PF_SDL_HasSSE SDL::HasSSE;
PF_SDL_HasSSE2 SDL::HasSSE2;
PF_SDL_HasSSE3 SDL::HasSSE3;
PF_SDL_HasSSE41 SDL::HasSSE41;
PF_SDL_HasSSE42 SDL::HasSSE42;
PF_SDL_HasScreenKeyboardSupport SDL::HasScreenKeyboardSupport;
PF_SDL_HideWindow SDL::HideWindow;
PF_SDL_Init SDL::Init;
PF_SDL_InitSubSystem SDL::InitSubSystem;
PF_SDL_IntersectRect SDL::IntersectRect;
PF_SDL_IntersectRectAndLine SDL::IntersectRectAndLine;
PF_SDL_IsGameController SDL::IsGameController;
PF_SDL_IsScreenKeyboardShown SDL::IsScreenKeyboardShown;
PF_SDL_IsScreenSaverEnabled SDL::IsScreenSaverEnabled;
// PF_SDL_IsShapedWindow SDL::IsShapedWindow;
PF_SDL_IsTextInputActive SDL::IsTextInputActive;
PF_SDL_JoystickClose SDL::JoystickClose;
PF_SDL_JoystickCurrentPowerLevel SDL::JoystickCurrentPowerLevel;
PF_SDL_JoystickEventState SDL::JoystickEventState;
PF_SDL_JoystickFromInstanceID SDL::JoystickFromInstanceID;
PF_SDL_JoystickGetAttached SDL::JoystickGetAttached;
PF_SDL_JoystickGetAxis SDL::JoystickGetAxis;
PF_SDL_JoystickGetBall SDL::JoystickGetBall;
PF_SDL_JoystickGetButton SDL::JoystickGetButton;
PF_SDL_JoystickGetDeviceGUID SDL::JoystickGetDeviceGUID;
PF_SDL_JoystickGetGUID SDL::JoystickGetGUID;
PF_SDL_JoystickGetGUIDFromString SDL::JoystickGetGUIDFromString;
PF_SDL_JoystickGetGUIDString SDL::JoystickGetGUIDString;
PF_SDL_JoystickGetHat SDL::JoystickGetHat;
PF_SDL_JoystickInstanceID SDL::JoystickInstanceID;
PF_SDL_JoystickIsHaptic SDL::JoystickIsHaptic;
PF_SDL_JoystickName SDL::JoystickName;
PF_SDL_JoystickNameForIndex SDL::JoystickNameForIndex;
PF_SDL_JoystickNumAxes SDL::JoystickNumAxes;
PF_SDL_JoystickNumBalls SDL::JoystickNumBalls;
PF_SDL_JoystickNumButtons SDL::JoystickNumButtons;
PF_SDL_JoystickNumHats SDL::JoystickNumHats;
PF_SDL_JoystickOpen SDL::JoystickOpen;
PF_SDL_JoystickUpdate SDL::JoystickUpdate;
PF_SDL_LoadBMP_RW SDL::LoadBMP_RW;
PF_SDL_LoadDollarTemplates SDL::LoadDollarTemplates;
PF_SDL_LoadFunction SDL::LoadFunction;
PF_SDL_LoadObject SDL::LoadObject;
PF_SDL_LoadWAV_RW SDL::LoadWAV_RW;
PF_SDL_LockAudio SDL::LockAudio;
PF_SDL_LockAudioDevice SDL::LockAudioDevice;
PF_SDL_LockMutex SDL::LockMutex;
PF_SDL_LockSurface SDL::LockSurface;
PF_SDL_LockTexture SDL::LockTexture;
PF_SDL_Log SDL::Log;
PF_SDL_LogCritical SDL::LogCritical;
PF_SDL_LogDebug SDL::LogDebug;
PF_SDL_LogError SDL::LogError;
PF_SDL_LogGetOutputFunction SDL::LogGetOutputFunction;
PF_SDL_LogGetPriority SDL::LogGetPriority;
PF_SDL_LogInfo SDL::LogInfo;
PF_SDL_LogMessage SDL::LogMessage;
PF_SDL_LogMessageV SDL::LogMessageV;
PF_SDL_LogResetPriorities SDL::LogResetPriorities;
PF_SDL_LogSetAllPriority SDL::LogSetAllPriority;
PF_SDL_LogSetOutputFunction SDL::LogSetOutputFunction;
PF_SDL_LogSetPriority SDL::LogSetPriority;
PF_SDL_LogVerbose SDL::LogVerbose;
PF_SDL_LogWarn SDL::LogWarn;
PF_SDL_LowerBlit SDL::LowerBlit;
PF_SDL_LowerBlitScaled SDL::LowerBlitScaled;
PF_SDL_MapRGB SDL::MapRGB;
PF_SDL_MapRGBA SDL::MapRGBA;
PF_SDL_MasksToPixelFormatEnum SDL::MasksToPixelFormatEnum;
PF_SDL_MaximizeWindow SDL::MaximizeWindow;
// PF_SDL_MemoryBarrierAcquire SDL::MemoryBarrierAcquire;
// PF_SDL_MemoryBarrierRelease SDL::MemoryBarrierRelease;
PF_SDL_MinimizeWindow SDL::MinimizeWindow;
PF_SDL_MixAudio SDL::MixAudio;
PF_SDL_MixAudioFormat SDL::MixAudioFormat;
// PF_SDL_MostSignificantBitIndex32 SDL::MostSignificantBitIndex32;
PF_SDL_MouseIsHaptic SDL::MouseIsHaptic;
PF_SDL_NumHaptics SDL::NumHaptics;
PF_SDL_NumJoysticks SDL::NumJoysticks;
PF_SDL_OpenAudio SDL::OpenAudio;
PF_SDL_OpenAudioDevice SDL::OpenAudioDevice;
PF_SDL_PauseAudio SDL::PauseAudio;
PF_SDL_PauseAudioDevice SDL::PauseAudioDevice;
PF_SDL_PeepEvents SDL::PeepEvents;
PF_SDL_PixelFormatEnumToMasks SDL::PixelFormatEnumToMasks;
PF_SDL_PointInRect SDL::PointInRect;
PF_SDL_PollEvent SDL::PollEvent;
PF_SDL_PumpEvents SDL::PumpEvents;
PF_SDL_PushEvent SDL::PushEvent;
PF_SDL_QueryTexture SDL::QueryTexture;
PF_SDL_QueueAudio SDL::QueueAudio;
PF_SDL_Quit SDL::Quit;
PF_SDL_QuitSubSystem SDL::QuitSubSystem;
PF_SDL_RWFromConstMem SDL::RWFromConstMem;
PF_SDL_RWFromFP SDL::RWFromFP;
//PF_SDL_RWFromFP SDL::RWFromFP;
PF_SDL_RWFromFile SDL::RWFromFile;
PF_SDL_RWFromMem SDL::RWFromMem;
PF_SDL_RaiseWindow SDL::RaiseWindow;
PF_SDL_ReadBE16 SDL::ReadBE16;
PF_SDL_ReadBE32 SDL::ReadBE32;
PF_SDL_ReadBE64 SDL::ReadBE64;
PF_SDL_ReadLE16 SDL::ReadLE16;
PF_SDL_ReadLE32 SDL::ReadLE32;
PF_SDL_ReadLE64 SDL::ReadLE64;
PF_SDL_ReadU8 SDL::ReadU8;
PF_SDL_RecordGesture SDL::RecordGesture;
PF_SDL_RectEmpty SDL::RectEmpty;
PF_SDL_RectEquals SDL::RectEquals;
// PF_SDL_RegisterApp SDL::RegisterApp;
PF_SDL_RegisterEvents SDL::RegisterEvents;
PF_SDL_RemoveTimer SDL::RemoveTimer;
PF_SDL_RenderClear SDL::RenderClear;
PF_SDL_RenderCopy SDL::RenderCopy;
PF_SDL_RenderCopyEx SDL::RenderCopyEx;
PF_SDL_RenderDrawLine SDL::RenderDrawLine;
PF_SDL_RenderDrawLines SDL::RenderDrawLines;
PF_SDL_RenderDrawPoint SDL::RenderDrawPoint;
PF_SDL_RenderDrawPoints SDL::RenderDrawPoints;
PF_SDL_RenderDrawRect SDL::RenderDrawRect;
PF_SDL_RenderDrawRects SDL::RenderDrawRects;
PF_SDL_RenderFillRect SDL::RenderFillRect;
PF_SDL_RenderFillRects SDL::RenderFillRects;
PF_SDL_RenderGetClipRect SDL::RenderGetClipRect;
// PF_SDL_RenderGetD3D9Device SDL::RenderGetD3D9Device;
PF_SDL_RenderGetLogicalSize SDL::RenderGetLogicalSize;
PF_SDL_RenderGetScale SDL::RenderGetScale;
PF_SDL_RenderGetViewport SDL::RenderGetViewport;
PF_SDL_RenderIsClipEnabled SDL::RenderIsClipEnabled;
PF_SDL_RenderPresent SDL::RenderPresent;
PF_SDL_RenderReadPixels SDL::RenderReadPixels;
PF_SDL_RenderSetClipRect SDL::RenderSetClipRect;
PF_SDL_RenderSetLogicalSize SDL::RenderSetLogicalSize;
PF_SDL_RenderSetScale SDL::RenderSetScale;
PF_SDL_RenderSetViewport SDL::RenderSetViewport;
PF_SDL_RenderTargetSupported SDL::RenderTargetSupported;
PF_SDL_ReportAssertion SDL::ReportAssertion;
PF_SDL_ResetAssertionReport SDL::ResetAssertionReport;
PF_SDL_RestoreWindow SDL::RestoreWindow;
PF_SDL_SaveAllDollarTemplates SDL::SaveAllDollarTemplates;
PF_SDL_SaveBMP_RW SDL::SaveBMP_RW;
PF_SDL_SaveDollarTemplate SDL::SaveDollarTemplate;
PF_SDL_SemPost SDL::SemPost;
PF_SDL_SemTryWait SDL::SemTryWait;
PF_SDL_SemValue SDL::SemValue;
PF_SDL_SemWait SDL::SemWait;
PF_SDL_SemWaitTimeout SDL::SemWaitTimeout;
PF_SDL_SetAssertionHandler SDL::SetAssertionHandler;
PF_SDL_SetClipRect SDL::SetClipRect;
PF_SDL_SetClipboardText SDL::SetClipboardText;
PF_SDL_SetColorKey SDL::SetColorKey;
PF_SDL_SetCursor SDL::SetCursor;
PF_SDL_SetError SDL::SetError;
PF_SDL_SetEventFilter SDL::SetEventFilter;
PF_SDL_SetHint SDL::SetHint;
PF_SDL_SetHintWithPriority SDL::SetHintWithPriority;
PF_SDL_SetMainReady SDL::SetMainReady;
PF_SDL_SetModState SDL::SetModState;
PF_SDL_SetPaletteColors SDL::SetPaletteColors;
PF_SDL_SetPixelFormatPalette SDL::SetPixelFormatPalette;
PF_SDL_SetRelativeMouseMode SDL::SetRelativeMouseMode;
PF_SDL_SetRenderDrawBlendMode SDL::SetRenderDrawBlendMode;
PF_SDL_SetRenderDrawColor SDL::SetRenderDrawColor;
PF_SDL_SetRenderTarget SDL::SetRenderTarget;
PF_SDL_SetSurfaceAlphaMod SDL::SetSurfaceAlphaMod;
PF_SDL_SetSurfaceBlendMode SDL::SetSurfaceBlendMode;
PF_SDL_SetSurfaceColorMod SDL::SetSurfaceColorMod;
PF_SDL_SetSurfacePalette SDL::SetSurfacePalette;
PF_SDL_SetSurfaceRLE SDL::SetSurfaceRLE;
PF_SDL_SetTextInputRect SDL::SetTextInputRect;
PF_SDL_SetTextureAlphaMod SDL::SetTextureAlphaMod;
PF_SDL_SetTextureBlendMode SDL::SetTextureBlendMode;
PF_SDL_SetTextureColorMod SDL::SetTextureColorMod;
PF_SDL_SetThreadPriority SDL::SetThreadPriority;
PF_SDL_SetWindowBordered SDL::SetWindowBordered;
PF_SDL_SetWindowBrightness SDL::SetWindowBrightness;
PF_SDL_SetWindowData SDL::SetWindowData;
PF_SDL_SetWindowDisplayMode SDL::SetWindowDisplayMode;
PF_SDL_SetWindowFullscreen SDL::SetWindowFullscreen;
PF_SDL_SetWindowGammaRamp SDL::SetWindowGammaRamp;
PF_SDL_SetWindowGrab SDL::SetWindowGrab;
PF_SDL_SetWindowHitTest SDL::SetWindowHitTest;
PF_SDL_SetWindowIcon SDL::SetWindowIcon;
PF_SDL_SetWindowMaximumSize SDL::SetWindowMaximumSize;
PF_SDL_SetWindowMinimumSize SDL::SetWindowMinimumSize;
PF_SDL_SetWindowPosition SDL::SetWindowPosition;
// PF_SDL_SetWindowShape SDL::SetWindowShape;
PF_SDL_SetWindowSize SDL::SetWindowSize;
PF_SDL_SetWindowTitle SDL::SetWindowTitle;
// PF_SDL_SetWindowsMessageHook SDL::SetWindowsMessageHook;
PF_SDL_ShowCursor SDL::ShowCursor;
PF_SDL_ShowMessageBox SDL::ShowMessageBox;
PF_SDL_ShowSimpleMessageBox SDL::ShowSimpleMessageBox;
PF_SDL_ShowWindow SDL::ShowWindow;
PF_SDL_SoftStretch SDL::SoftStretch;
PF_SDL_StartTextInput SDL::StartTextInput;
PF_SDL_StopTextInput SDL::StopTextInput;
/*PF_SDL_Swap16 SDL::Swap16;
PF_SDL_Swap32 SDL::Swap32;
PF_SDL_Swap32 SDL::Swap32;
PF_SDL_Swap32 SDL::Swap32;
PF_SDL_Swap32 SDL::Swap32;
PF_SDL_Swap32 SDL::Swap32;
PF_SDL_Swap64 SDL::Swap64;
PF_SDL_Swap64 SDL::Swap64;
PF_SDL_Swap64 SDL::Swap64;*/
PF_SDL_SwapFloat SDL::SwapFloat;
PF_SDL_TLSCreate SDL::TLSCreate;
PF_SDL_TLSGet SDL::TLSGet;
PF_SDL_TLSSet SDL::TLSSet;
PF_SDL_ThreadID SDL::ThreadID;
PF_SDL_TryLockMutex SDL::TryLockMutex;
PF_SDL_UnionRect SDL::UnionRect;
PF_SDL_UnloadObject SDL::UnloadObject;
PF_SDL_UnlockAudio SDL::UnlockAudio;
PF_SDL_UnlockAudioDevice SDL::UnlockAudioDevice;
PF_SDL_UnlockMutex SDL::UnlockMutex;
PF_SDL_UnlockSurface SDL::UnlockSurface;
PF_SDL_UnlockTexture SDL::UnlockTexture;
// PF_SDL_UnregisterApp SDL::UnregisterApp;
PF_SDL_UpdateTexture SDL::UpdateTexture;
PF_SDL_UpdateWindowSurface SDL::UpdateWindowSurface;
PF_SDL_UpdateWindowSurfaceRects SDL::UpdateWindowSurfaceRects;
PF_SDL_UpdateYUVTexture SDL::UpdateYUVTexture;
PF_SDL_UpperBlit SDL::UpperBlit;
PF_SDL_UpperBlitScaled SDL::UpperBlitScaled;
PF_SDL_VideoInit SDL::VideoInit;
PF_SDL_VideoQuit SDL::VideoQuit;
PF_SDL_WaitEvent SDL::WaitEvent;
PF_SDL_WaitEventTimeout SDL::WaitEventTimeout;
PF_SDL_WaitThread SDL::WaitThread;
PF_SDL_WarpMouseGlobal SDL::WarpMouseGlobal;
PF_SDL_WarpMouseInWindow SDL::WarpMouseInWindow;
PF_SDL_WasInit SDL::WasInit;
// PF_SDL_WinRTGetFSPathUNICODE SDL::WinRTGetFSPathUNICODE;
// PF_SDL_WinRTGetFSPathUTF8 SDL::WinRTGetFSPathUTF8;
// PF_SDL_WinRTRunApp SDL::WinRTRunApp;
PF_SDL_WriteBE16 SDL::WriteBE16;
PF_SDL_WriteBE32 SDL::WriteBE32;
PF_SDL_WriteBE64 SDL::WriteBE64;
PF_SDL_WriteLE16 SDL::WriteLE16;
PF_SDL_WriteLE32 SDL::WriteLE32;
PF_SDL_WriteLE64 SDL::WriteLE64;
PF_SDL_WriteU8 SDL::WriteU8;
PF_SDL_abs SDL::abs;
PF_SDL_acos SDL::acos;
PF_SDL_asin SDL::asin;
PF_SDL_atan SDL::atan;
PF_SDL_atan2 SDL::atan2;
PF_SDL_atof SDL::atof;
PF_SDL_atoi SDL::atoi;
PF_SDL_calloc SDL::calloc;
PF_SDL_ceil SDL::ceil;
PF_SDL_copysign SDL::copysign;
PF_SDL_cos SDL::cos;
PF_SDL_cosf SDL::cosf;
PF_SDL_fabs SDL::fabs;
PF_SDL_floor SDL::floor;
PF_SDL_free SDL::free;
PF_SDL_getenv SDL::getenv;
// PF_SDL_iPhoneSetAnimationCallback SDL::iPhoneSetAnimationCallback;
// PF_SDL_iPhoneSetEventPump SDL::iPhoneSetEventPump;
PF_SDL_iconv SDL::iconv;
PF_SDL_iconv_close SDL::iconv_close;
PF_SDL_iconv_open SDL::iconv_open;
PF_SDL_iconv_string SDL::iconv_string;
PF_SDL_isdigit SDL::isdigit;
PF_SDL_isspace SDL::isspace;
PF_SDL_itoa SDL::itoa;
PF_SDL_lltoa SDL::lltoa;
PF_SDL_log SDL::log;
PF_SDL_ltoa SDL::ltoa;
PF_SDL_main SDL::main;
PF_SDL_malloc SDL::malloc;
PF_SDL_memcmp SDL::memcmp;
PF_SDL_memcpy SDL::memcpy;
PF_SDL_memmove SDL::memmove;
PF_SDL_memset SDL::memset;
PF_SDL_memset4 SDL::memset4;
PF_SDL_pow SDL::pow;
PF_SDL_qsort SDL::qsort;
PF_SDL_realloc SDL::realloc;
PF_SDL_scalbn SDL::scalbn;
PF_SDL_setenv SDL::setenv;
PF_SDL_sin SDL::sin;
PF_SDL_sinf SDL::sinf;
PF_SDL_snprintf SDL::snprintf;
PF_SDL_sqrt SDL::sqrt;
PF_SDL_sqrtf SDL::sqrtf;
PF_SDL_sscanf SDL::sscanf;
PF_SDL_strcasecmp SDL::strcasecmp;
PF_SDL_strchr SDL::strchr;
PF_SDL_strcmp SDL::strcmp;
PF_SDL_strdup SDL::strdup;
PF_SDL_strlcat SDL::strlcat;
PF_SDL_strlcpy SDL::strlcpy;
PF_SDL_strlen SDL::strlen;
PF_SDL_strlwr SDL::strlwr;
PF_SDL_strncasecmp SDL::strncasecmp;
PF_SDL_strncmp SDL::strncmp;
PF_SDL_strrchr SDL::strrchr;
PF_SDL_strrev SDL::strrev;
PF_SDL_strstr SDL::strstr;
PF_SDL_strtod SDL::strtod;
PF_SDL_strtol SDL::strtol;
PF_SDL_strtoll SDL::strtoll;
PF_SDL_strtoul SDL::strtoul;
PF_SDL_strtoull SDL::strtoull;
PF_SDL_strupr SDL::strupr;
PF_SDL_tan SDL::tan;
PF_SDL_tanf SDL::tanf;
PF_SDL_tolower SDL::tolower;
PF_SDL_toupper SDL::toupper;
PF_SDL_uitoa SDL::uitoa;
PF_SDL_ulltoa SDL::ulltoa;
PF_SDL_ultoa SDL::ultoa;
PF_SDL_utf8strlcpy SDL::utf8strlcpy;
PF_SDL_vsnprintf SDL::vsnprintf;
PF_SDL_vsscanf SDL::vsscanf;
PF_SDL_wcslcat SDL::wcslcat;
PF_SDL_wcslcpy SDL::wcslcpy;
PF_SDL_wcslen SDL::wcslen;
void* SDL_LIBRARY;
